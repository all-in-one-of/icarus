#!/usr/bin/python

# [Icarus] Barch Rename Tool rename__main__.py
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2016 Gramercy Park Studios
#
# A UI for batch renaming / renumbering of files and folders.


from PySide import QtCore, QtGui
from rename_ui import * # <- import your app's UI file (as generated by pyside-uic)
import os, re, sys

# Initialise Icarus environment
sys.path.append(os.environ['ICWORKINGDIR'])
import env__init__
env__init__.setEnv()
#env__init__.appendSysPaths()

import sequence as seq
import rename
#import djvOps, osOps


class batchRenameApp(QtGui.QMainWindow):

	def __init__(self, parent = None):
		super(batchRenameApp, self).__init__()
		self.ui = Ui_MainWindow()
		self.ui.setupUi(self)

		self.fileRenameLs = []
		#self.relativeRootDir = os.environ['SHOTPATH']
		#self.relativeRootToken = '$SHOTPATH'

		# Connect signals & slots
		self.ui.dir_lineEdit.textEdited.connect(self.updateRenameDir)
		self.ui.dirBrowse_toolButton.clicked.connect(self.addSelection)
		#self.ui.add_pushButton.clicked.connect(self.addSelection)
		self.ui.remove_pushButton.clicked.connect(self.removeSelection)
		self.ui.rename_pushButton.clicked.connect(self.performFileRename)

		self.ui.find_lineEdit.textEdited.connect(self.updateRenamePreview)
		self.ui.replace_lineEdit.textEdited.connect(self.updateRenamePreview)
		self.ui.ignoreCase_checkBox.stateChanged.connect(self.updateRenamePreview)
		self.ui.regex_checkBox.stateChanged.connect(self.updateRenamePreview)

		self.ui.preserveNumbering_checkBox.stateChanged.connect(self.updateRenamePreview)
		self.ui.start_spinBox.valueChanged.connect(self.updateRenamePreview)
		self.ui.step_spinBox.valueChanged.connect(self.updateRenamePreview)
		self.ui.autoPadding_checkBox.stateChanged.connect(self.updateRenamePreview)
		self.ui.padding_spinBox.valueChanged.connect(self.updateRenamePreview)

		#self.ui.renderPblClear_pushButton.clicked.connect(self.renderTableClear)
		#self.ui.selection_treeWidget.itemDoubleClicked.connect(self.renderPreview)

		#self.ui.close_pushButton.clicked.connect(self.exit)

		# Get current dir in which to rename files, and update render layer tree view widget
		self.renameDir = os.getcwd()
		#self.renameDir = "/Volumes/Toshiba/Dev/jobs/test_job_2/Vfx/PC001/3D/maya/renders/Michael/puzzle_v006/main"
		self.updateRenameListView()


	def getCheckBoxValue(self, checkBox):
		""" Get the value from a checkbox and return a Boolean value.
		"""
		if checkBox.checkState() == QtCore.Qt.Checked:
			return True
		else:
			return False


	def folderDialog(self, dialogHome):
		""" Opens a file dialog to choose which directory to browse.
		"""
		dialog = QtGui.QFileDialog.getExistingDirectory(self, self.tr('Directory'), dialogHome, 
				 QtGui.QFileDialog.DontResolveSymlinks | QtGui.QFileDialog.ShowDirsOnly)
		return dialog


	def addSelection(self):
		""" Adds files to the list to be renamed.
		"""
		if os.environ.get('MAYARENDERSDIR') is None:
			renderBrowseDir = os.getcwd()
		else:
			renderBrowseDir = os.environ['MAYARENDERSDIR']

		self.renameDir = self.folderDialog(renderBrowseDir)
		self.updateRenameListView()


	def updateRenameDir(self):
		""" .
		"""
		self.renameDir = self.ui.dir_lineEdit.text()
		if os.path.isdir(self.renameDir):
			self.updateRenameListView()
		else:
			self.ui.selection_treeWidget.clear()


	def removeSelection(self):
		""" Removes selected items from the list to be renamed.
		"""
		for item in self.ui.selection_treeWidget.selectedItems():
			index = self.ui.selection_treeWidget.indexOfTopLevelItem(item)
			self.ui.selection_treeWidget.takeTopLevelItem(index)

			del self.fileRenameLs[index]


	def updateRenameListView(self):
		""" Populates the rename list tree view widget with entries.
		"""
		count = 0
		path = self.renameDir
		self.ui.dir_lineEdit.setText(path)

		self.ui.selection_treeWidget.clear()

#		# Get directory contents
#		try:
#			ls = os.listdir(path)
#			ls.sort()
#		except OSError:
#			print "No such file or directory: '%s'" %path
#			return False
#
#		# Create list to hold all files to be renamed
#		fileRenameLs = []
#
#		# Get list of files in current directory
#		for filename in ls:
#
#			# Only work on files, not directories, and ignore files that start with a dot
#			if os.path.isfile(os.path.join(path, filename)) and not filename.startswith('.'):
#				fileRenameLs.append(os.path.join(path, filename))
#
#		# Remove duplicates & sort list
#		self.fileRenameLs = list(set(fileRenameLs))
#		self.fileRenameLs.sort()
#
#		for file in self.fileRenameLs:
#
#			# Add entries
#			renderLayerItem = QtGui.QTreeWidgetItem(self.ui.selection_treeWidget)
#			renderLayerItem.setText(0, file)
#			renderLayerItem.setText(1, file)
#			self.ui.selection_treeWidget.addTopLevelItem(renderLayerItem)

		# Get list of file sequence bases in specified directory
		bases = seq.getBases(path)

		for base in bases:
			path, prefix, fr_range, ext, num_frames = seq.getSequence(path, base)

			# Add entries
			file = "%s.[%s]%s" %(prefix, fr_range, ext)
			renderLayerItem = QtGui.QTreeWidgetItem(self.ui.selection_treeWidget)
			renderLayerItem.setCheckState(0, QtCore.Qt.Checked)
			renderLayerItem.setText(0, str(num_frames))
			renderLayerItem.setText(1, file)
			renderLayerItem.setText(2, file)
			self.ui.selection_treeWidget.addTopLevelItem(renderLayerItem)

			self.fileRenameLs.append( ("%s." %prefix, fr_range, ext) )
			count += num_frames

			#renderLayerItem.setExpanded(True)

		# Resize columns
		self.ui.selection_treeWidget.resizeColumnToContents(0)
		self.ui.selection_treeWidget.resizeColumnToContents(1)
		self.ui.selection_treeWidget.resizeColumnToContents(2)

		# Update button text
		self.ui.rename_pushButton.setText("Rename %d Files" %count)


	def updateRenamePreview(self):
		""" Updates the 'After' column to reflect the file name changes to be applied.
		"""
		# Get find & replace options
		findStr = self.ui.find_lineEdit.text()
		replaceStr = self.ui.replace_lineEdit.text()
		ignoreCase = self.getCheckBoxValue(self.ui.ignoreCase_checkBox)
		regex = self.getCheckBoxValue(self.ui.regex_checkBox)

		# Get renumbering options
		start = self.ui.start_spinBox.value()
		step = self.ui.step_spinBox.value()
		padding = self.ui.padding_spinBox.value()
		preserve = self.getCheckBoxValue(self.ui.preserveNumbering_checkBox)
		autopad = self.getCheckBoxValue(self.ui.autoPadding_checkBox)

		root = self.ui.selection_treeWidget.invisibleRootItem()
		child_count = root.childCount()
		for i in range(child_count):
			item = root.child(i)

			renamedPrefix = rename.replaceTextRE(self.fileRenameLs[i][0], findStr, replaceStr, ignoreCase, regex)

			numLs = seq.numList(self.fileRenameLs[i][1])
			renumberedLs, padding = rename.renumber(numLs, start, step, padding, preserve, autopad)
			renumberedRange = seq.numRange(renumberedLs, padding)

			renamed_file = "%s[%s]%s" %(renamedPrefix, renumberedRange, self.fileRenameLs[i][2])
			item.setText(2, renamed_file)

		# Resize columns
		self.ui.selection_treeWidget.resizeColumnToContents(2)


	def performFileRename(self):
		""" Perform the file rename operation(s).
		"""
#		root = self.ui.selection_treeWidget.invisibleRootItem()
#		child_count = root.childCount()
#		for i in range(child_count):
#			item = root.child(i)
#			origName = self.expandSeq(item.text(0))
#			newName =  self.expandSeq(item.text(1))
#			for j in range(len(origName)):
#				print "rename %s %s" %( origName[j], newName[j] )


	def expandSeq(self, inputFileSeq):
		""" Expand a filename sequence in the format 'name.[start-end].ext' to a list of individual frames.
		"""
		fileLs = []
		# Split filename and separate sequence numbering
		prefix, numRange, ext = re.split(r'[\[\]]', inputFileSeq)
		numList = seq.numList(numRange)
		for i in numList:
			file = "%s%s%s" %(prefix, i, ext)
			filePath = os.path.join(self.renameDir, file)
			fileLs.append(filePath)
		return fileLs


#	def exit(self):
#		""" Exit the dialog.
#		"""
#		self.hide()


if __name__ == "__main__":
	app = QtGui.QApplication(sys.argv)

	#app.setStyle('fusion') # Set UI style - you can also use a flag e.g. '-style plastique'

	import rsc_rc # TODO: Check why this isn't working from within the UI file

	# Apply UI style sheet
	qss=os.path.join(os.environ['ICWORKINGDIR'], "style.qss")
	with open(qss, "r") as fh:
		app.setStyleSheet(fh.read())

	brApp = batchRenameApp()
	brApp.show()
	sys.exit(app.exec_())

else:
	brApp = batchRenameApp()
	brApp.show()

