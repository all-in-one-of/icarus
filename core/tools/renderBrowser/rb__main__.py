#!/usr/bin/python

# [Icarus] Render Browser rb__init__.py
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2016 Gramercy Park Studios
#
# Provides a UI to browse render folders and provide at-a-glance review of layers, passes/AOVs, sequences, etc.


from PySide import QtCore, QtGui
from rb_ui import * # <- import your app's UI file (as generated by pyside-uic)
import os, re, sys

#os.environ['ICWORKINGDIR'] = 'C:/Users/mikebonnington/Documents/GitHub/icarus/core/ui' # temporary
#os.environ['MAYARENDERSDIR'] = 'Z:/RnD/rnd_job/Vfx/PC010/3D/maya/renders/mikebonnington' # temporary

# Initialise Icarus environment
sys.path.append(os.environ['ICWORKINGDIR'])
import env__init__
env__init__.setEnv()
#env__init__.appendSysPaths()

import sequence as seq
import djvOps


class renderBrowserApp(QtGui.QMainWindow):

	def __init__(self, parent = None):
		super(renderBrowserApp, self).__init__()
		self.ui = Ui_MainWindow()
		self.ui.setupUi(self)

		self.relativeRootDir = os.environ['SHOTPATH']
		self.relativeRootToken = '$SHOTPATH'

		# Connect signals & slots
		self.ui.renderPblAdd_pushButton.clicked.connect(self.renderTableAdd)
		self.ui.renderPblRemove_pushButton.clicked.connect(self.renderTableRemove)
		self.ui.renderPreview_pushButton.clicked.connect(self.preview)
		self.ui.renderPbl_treeWidget.itemDoubleClicked.connect(self.cell_was_clicked)

		self.renderPath = os.getcwd()
		self.renderTableUpdate()


	def relativePath(self, absPath):
		if absPath.startswith(self.relativeRootDir):
			return absPath.replace(self.relativeRootDir, self.relativeRootToken)
		else:
			return absPath


	def absolutePath(self, relPath):
		return relPath.replace(self.relativeRootToken, self.relativeRootDir)


	def preview(self, path=None):
		""" Preview - opens djv_view to preview a movie or image sequence.
		"""
		#verbose.launchApp('djv_view')
		if path is None:
			djvOps.viewer(self.renderPath)
		else:
			djvOps.viewer(path)


	def folderDialog(self, dialogHome):
		""" Opens a file dialog to choose which directory to browse.
		"""
		dialog = QtGui.QFileDialog.getExistingDirectory(self, self.tr('Directory'), dialogHome, 
				 QtGui.QFileDialog.DontResolveSymlinks | QtGui.QFileDialog.ShowDirsOnly)
		return dialog


	def cell_was_clicked(self, item, column):
		""" TEMPORARY FUNCTION - catches double-click signal on dailies table and launches sequence in viewer
		"""
		#item = self.ui.renderPbl_treeWidget.itemAt(row)
		print item.text(column), column
		#print self.ui.renderPbl_treeWidget.indexOfTopLevelItem(item)
		#print("Row %d and column %d was clicked: %s" % (row, column, item.text()))
		#self.ID = item.text()
		djvOps.viewer( self.absolutePath(item.text(3).replace('#', os.environ['STARTFRAME'])) )


	def renderTableUpdate(self):
		""" Populates the render layer tree view widget with entries.
		"""
		renderPath = self.renderPath
		if renderPath:
			renderLayerDirs = next(os.walk(renderPath))[1]
			renderLayerDirs.sort()

			# Add render layers
			for renderLayerDir in renderLayerDirs:
				renderPasses = seq.getBases(os.path.join(renderPath, renderLayerDir))

				if renderPasses: # only continue if render pass sequences exist in this directory
					renderLayerItem = QtGui.QTreeWidgetItem(self.ui.renderPbl_treeWidget)
					renderLayerItem.setText(0, '%s (%d)' % (renderLayerDir, len(renderPasses)))
					renderLayerItem.setText(2, 'layer')
					#renderLayerItem.setText(3, os.path.join(renderPath, renderLayerDir))
					renderLayerItem.setText(3, self.relativePath(os.path.join(renderPath, renderLayerDir)))
					self.ui.renderPbl_treeWidget.addTopLevelItem(renderLayerItem)
					renderLayerItem.setExpanded(True)

					# Add render passes
					for renderPass in renderPasses:
						renderPassItem = QtGui.QTreeWidgetItem(renderLayerItem)
						path, prefix, fr_range, ext, num_frames = seq.getSequence( os.path.join(renderPath, renderLayerDir), renderPass )
						renderPassItem.setText(0, prefix)
						#renderPassItem.setText(1, '%s (%d)' % (fr_range, num_frames))
						renderPassItem.setText(1, fr_range)
						if not fr_range == os.environ['FRAMERANGE']:
							renderPassItem.setForeground(1, QtGui.QBrush(QtGui.QColor("#cd2729")))
						renderPassItem.setText(2, ext.split('.', 1)[1])
						renderPassItem.setText(3, self.relativePath(os.path.join(renderPath, renderLayerDir, renderPass)))
						#renderPassItem.setText(3, path)
						#renderPassItem.setText(1, '1-50')
						self.ui.renderPbl_treeWidget.addTopLevelItem(renderPassItem)

			self.ui.renderPbl_treeWidget.resizeColumnToContents(0)
			self.ui.renderPbl_treeWidget.resizeColumnToContents(1)
			self.ui.renderPbl_treeWidget.resizeColumnToContents(2)

			#dailyPath = dailyPath.replace('\\', '/') # Ensure backslashes from Windows paths are changed to forward slashes
			#self.previewPath = dailyPath
			#seqDir = dailyPath.replace(os.environ['SHOTPATH'].replace('\\', '/'), '$SHOTPATH') # Change to relative path
			#seqDir = os.path.dirname(seqDir)
			#dailyDic = pblOptsPrc.dailyPath_prc(dailyPath)
			#seqName, seqRange = seq.detectSeq(renderPath)
			#print seqName, seqRange


	def renderTableAdd(self):
		""" Adds entries to the render layer tree view widget.
		"""
		if os.environ.get('MAYARENDERSDIR') is None:
			renderBrowseDir = os.getcwd()
		else:
			renderBrowseDir = os.environ['MAYARENDERSDIR']

		self.renderPath = self.folderDialog(renderBrowseDir)
		self.renderTableUpdate()


	def renderTableRemove(self):
		""" Removes the selected entry from the render layer tree view widget.
		"""
		for item in self.ui.renderPbl_treeWidget.selectedItems():
			self.ui.renderPbl_treeWidget.takeTopLevelItem( self.ui.renderPbl_treeWidget.indexOfTopLevelItem(item) )

	#	rmRowLs = []
	#	for selIndex in self.ui.renderPbl_treeWidget.selectedIndexes():
	#		selItem = self.ui.renderPbl_treeWidget.itemFromIndex(selIndex)
	#		selRow = self.ui.renderPbl_treeWidget.row(selItem)
	#		if selRow not in rmRowLs:
	#			rmRowLs.append(selRow)
	#	rmRowLs = sorted(rmRowLs, reverse=True)
	#	for rmRow in rmRowLs:
	#		self.ui.renderPbl_treeWidget.removeRow(rmRow)


if __name__ == "__main__":
	app = QtGui.QApplication(sys.argv)

	#app.setStyle('plastique') # Set UI style - you can also use a flag e.g. '-style plastique'

	import rsc_rc # TODO: Check why this isn't working from within the UI file

	# Apply UI style sheet
	#qss="style.qss"
	qss=os.path.join(os.environ['ICWORKINGDIR'], "style.qss")
	with open(qss, "r") as fh:
		app.setStyleSheet(fh.read())

	myApp = renderBrowserApp()
	myApp.show()
	sys.exit(app.exec_())
