#!/usr/bin/python

# [Icarus] Render Browser rb__init__.py
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2016 Gramercy Park Studios
#
# Provides a UI to browse render folders and see at-a-glance layers, passes/AOVs, sequences, etc.


from PySide import QtCore, QtGui
from rb_ui import * # <- import your app's UI file (as generated by pyside-uic)
import os, sys

# Initialise Icarus environment
#os.environ['ICWORKINGDIR'] = '/Users/mikebonnington/Documents/Scripts/icarus/core/ui'
sys.path.append(os.environ['ICWORKINGDIR'])
import env__init__
env__init__.setEnv()
#env__init__.appendSysPaths()

import sequence as seq


class renderBrowserApp(QtGui.QMainWindow):

	def __init__(self, parent = None):
		super(renderBrowserApp, self).__init__()
		self.ui = Ui_MainWindow()
		self.ui.setupUi(self)

		# Connect signals & slots
		self.ui.renderPblAdd_pushButton.clicked.connect(self.renderTableAdd)
		self.ui.renderPblRemove_pushButton.clicked.connect(self.renderTableRemove)


	def folderDialog(self, dialogHome):
		""" 
		"""
		dialog = QtGui.QFileDialog.getExistingDirectory(self, self.tr('Directory'), dialogHome, 
				 QtGui.QFileDialog.DontResolveSymlinks | QtGui.QFileDialog.ShowDirsOnly)
		return dialog


	def renderTableAdd(self):
		""" 
		"""
		renderPath = self.folderDialog('/Users/mikebonnington/Documents/Scripts/jobs/test_job_2/Vfx/PC001/3D/maya/renders/mikebonnington')
		if renderPath:
			renderLayerDirs = next(os.walk(renderPath))[1]
			for renderLayerDir in renderLayerDirs:
				print renderLayerDir
				files = next(os.walk(renderLayerDir))[2]
				for file_ in files:
					print file_
				#layerItem = QtGui.QTreeWidgetItem(self.ui.renderPbl_treeWidget)

				#layerItem = QtGui.QTableWidgetItem(layer)
			#dailyPath = dailyPath.replace('\\', '/') # Ensure backslashes from Windows paths are changed to forward slashes
			#self.previewPath = dailyPath
			#seqDir = dailyPath.replace(os.environ['SHOTPATH'].replace('\\', '/'), '$SHOTPATH') # Change to relative path
			#seqDir = os.path.dirname(seqDir)
			#dailyDic = pblOptsPrc.dailyPath_prc(dailyPath)
			seqName, seqRange = seq.detectSeq(renderPath)
			print seqName, seqRange
			self.ui.renderPbl_treeWidget.resizeColumnToContents(0)


	def renderTableRemove(self):
		""" 
		"""
		for item in self.ui.renderPbl_treeWidget.selectedItems():
			#self.ui.renderPbl_treeWidget.takeItem( self.ui.renderPbl_treeWidget.row(item) )
			self.ui.renderPbl_treeWidget.takeTopLevelItem( self.ui.renderPbl_treeWidget.indexOfTopLevelItem(item) )

	#	rmRowLs = []
	#	for selIndex in self.ui.renderPbl_treeWidget.selectedIndexes():
	#		selItem = self.ui.renderPbl_treeWidget.itemFromIndex(selIndex)
	#		selRow = self.ui.renderPbl_treeWidget.row(selItem)
	#		if selRow not in rmRowLs:
	#			rmRowLs.append(selRow)
	#	rmRowLs = sorted(rmRowLs, reverse=True)
	#	for rmRow in rmRowLs:
	#		self.ui.renderPbl_treeWidget.removeRow(rmRow)


if __name__ == "__main__":
	app = QtGui.QApplication(sys.argv)

	#app.setStyle('plastique') # Set UI style - you can also use a flag e.g. '-style plastique'

	import rsc_rc # TODO: Check why this isn't working from within the UI file

	# Apply UI style sheet
	#qss="style.qss"
	qss=os.path.join(os.environ['ICWORKINGDIR'], "style.qss")
	with open(qss, "r") as fh:
		app.setStyleSheet(fh.read())

	myApp = renderBrowserApp()
	myApp.show()
	sys.exit(app.exec_())
