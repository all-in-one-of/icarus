#!/usr/bin/python

# [Icarus] Batch Render Slave slave__main__.py
# v0.1
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2016 Gramercy Park Studios
#
# Render Slave UI - looks for batch render jobs to render.


from PySide import QtCore, QtGui
from slave_ui import * # <- import your app's UI file (as generated by pyside-uic)
import os, socket, sys, time

# Import custom modules
import renderQueue


class gpsRenderSlaveApp(QtGui.QDialog):

	def __init__(self, parent = None):
		super(gpsRenderSlaveApp, self).__init__()
		self.ui = Ui_Dialog()
		self.ui.setupUi(self)

		self.localhost = socket.gethostname()

		# Instantiate render queue class and load data
		self.rq = renderQueue.renderQueue()
		self.rq.loadXML(os.path.join(os.environ['PIPELINE'], 'core', 'config', 'renderQueue.xml'))

		# Connect signals & slots
		self.ui.close_pushButton.clicked.connect(self.exit)

		self.ui.info_lineEdit.setText(self.localhost)
		self.dequeue() # should only be done if slave is idle


	def dequeue(self):
		""" THIS IS ALL A BIT ROPEY ATM
		"""
		self.rq.loadXML(quiet=True) # reload XML data

		self.jobElement = self.rq.getHighestPriorityJob()
		frames = self.rq.dequeueTask(self.jobElement, self.localhost)

		self.startFrame, self.endFrame = frames.split('-') # temp and a bit hacky

		self.ui.info_lineEdit.setText("%s" %(self.localhost))

		self.render()
		# for jobElement in self.rq.getJobs():
		# 	for taskElement in jobElement.findall('task'):
		# 		renderTaskItem = QtGui.QTreeWidgetItem(renderJobItem)


	def render(self):
		""" Construct render command.
		"""
		import signal, subprocess

		#self.calcFrameList(quiet=False)

		try:
			renderCmd = '"%s"' %os.environ['MAYARENDERVERSION'] # store this in XML as maya version may vary with project
		except KeyError:
			print "ERROR: Path to Maya Render command executable not found. This can be set with the environment variable 'MAYARENDERVERSION'."

		cmdStr = ''
		args = '-proj "%s"' %self.rq.getValue(self.jobElement, 'mayaProject')
		frameRangeArgs = ''

		sceneName = '"%s"' %self.rq.getValue(self.jobElement, 'mayaScene')

		# Check we're not working in an unsaved scene
		if sceneName:

			mayaFlags = self.rq.getValue(self.jobElement, 'mayaFlags')
			if mayaFlags is not None:
				args += ' %s' %self.rq.getValue(self.jobElement, 'mayaFlags')

			# Construct command(s)
			if True: # replace with check if the job jas any tasks
				frameRangeArgs = '-s %d -e %d' %(int(self.startFrame), int(self.endFrame))

				cmdStr += '%s %s %s %s' %(renderCmd, args, frameRangeArgs, sceneName)

			else:
				cmdStr = '%s %s %s' %(renderCmd, args, sceneName)

			if os.environ['ICARUS_RUNNING_OS'] == 'Windows':
				#print cmdStr
				self.ui.output_textEdit.setPlainText(cmdStr)
				#self.renderProcess = subprocess.Popen(cmdStr, shell=True) #, stdout=subprocess.PIPE, shell=True)
			else:
				#print cmdStr
				self.ui.output_textEdit.setPlainText(cmdStr)
				#self.renderProcess = subprocess.Popen(cmdStr, stdout=subprocess.PIPE, shell=True, preexec_fn=os.setsid)

			# Disable UI to prevent new renders being submitted
			#self.tglUI(False)

		else:
			print "ERROR: Scene not specified."


	# def kill(self):
	# 	""" Kill the rendering process.
	# 	"""
	# 	try:
	# 		print "Attempting to kill rendering process (PID=%s)" %self.renderProcess.pid
	# 		if os.environ['ICARUS_RUNNING_OS'] == 'Windows':
	# 			os.killpg(self.renderProcess.pid, signal.SIGTERM)
	# 		else:
	# 			os.kill(self.renderProcess.pid, signal.CTRL_C_EVENT)

	# 	except (OSError, AttributeError):
	# 		print "Warning: Cannot kill rendering process as there is no render in progress."

	# 	# Re-enable UI
	# 	self.tglUI(True)


	def exit(self):
		""" Exit the dialog.
		"""
		self.hide()


if __name__ == "__main__":
	app = QtGui.QApplication(sys.argv)

	# Initialise Icarus environment
	os.environ['ICWORKINGDIR'] = "N:\Dev\icarus\core\ui" # temp assignment
	sys.path.append(os.environ['ICWORKINGDIR'])
	import env__init__
	env__init__.setEnv()

	import rsc_rc # TODO: Check why this isn't working from within the UI file

	#app.setStyle('fusion') # Set UI style - you can also use a flag e.g. '-style plastique'

	# Apply UI style sheet
	qss=os.path.join(os.environ['ICWORKINGDIR'], "style.qss")
	with open(qss, "r") as fh:
		app.setStyleSheet(fh.read())

	renderSlaveApp = gpsRenderSlaveApp()
	renderSlaveApp.show()
	sys.exit(app.exec_())

else:
	renderSlaveApp = gpsRenderSlaveApp()
	print renderSlaveApp
	renderSlaveApp.show()

