#!/usr/bin/python

# [Icarus] Batch Render Queue Manager queue__main__.py
# v0.1
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2016 Gramercy Park Studios
#
# A UI for managing the render queue.


from PySide import QtCore, QtGui
from queue_ui import * # <- import your app's UI file (as generated by pyside-uic)
import datetime, os, sys

# Import custom modules
import renderQueue


class gpsRenderQueueApp(QtGui.QMainWindow):

	def __init__(self, parent = None):
		super(gpsRenderQueueApp, self).__init__()
		self.ui = Ui_MainWindow()
		self.ui.setupUi(self)

		# Instantiate render queue class and load data
		self.rq = renderQueue.renderQueue()
		self.rq.loadXML(os.path.join(os.environ['PIPELINE'], 'core', 'config', 'renderQueue.xml'))

		# Connect signals & slots
		self.ui.refresh_toolButton.clicked.connect(self.updateRenderQueueView)
		self.ui.jobSubmit_toolButton.clicked.connect(self.launchRenderSubmit)
		self.ui.jobPause_toolButton.clicked.connect(lambda *args: self.changePriority(0, absolute=True))
		self.ui.jobDelete_toolButton.clicked.connect(self.deleteRenderJob)
		# self.ui.jobPriorityInc_toolButton.clicked.connect(lambda *args: self.changePriority(1))
		# self.ui.jobPriorityDec_toolButton.clicked.connect(lambda *args: self.changePriority(-1))
		self.ui.jobPriority_slider.sliderMoved.connect(lambda value: self.changePriority(value)) # valueChanged
		self.ui.jobPriority_slider.sliderReleased.connect(self.updatePriority)
		self.ui.taskComplete_toolButton.clicked.connect(self.completeTask)
		self.ui.taskRequeue_toolButton.clicked.connect(self.requeueTask)
		self.ui.slave_toolButton.clicked.connect(self.launchRenderSlave)

		self.updateRenderQueueView()


	def updateRenderQueueView(self):
		""" Populates the render queue tree view widget with entries for render jobs and tasks.
		"""
		self.rq.loadXML(quiet=True) # reload XML data

		self.ui.renderQueue_treeWidget.clear()

		# Populate render jobs
		for jobElement in self.rq.getJobs():
			renderJobItem = QtGui.QTreeWidgetItem(self.ui.renderQueue_treeWidget)

			jobTotalTimeSeconds = 0
			completedTasks = 0

			# Populate render tasks
			taskElements = jobElement.findall('task')
			for taskElement in taskElements:
				renderTaskItem = QtGui.QTreeWidgetItem(renderJobItem)

				renderTaskItem.setText(0, "Task %s" %taskElement.get('id'))
				renderTaskItem.setText(1, taskElement.get('id'))
				renderTaskItem.setText(2, self.rq.getValue(taskElement, 'frames'))
				taskStatus = self.rq.getValue(taskElement, 'status')
				renderTaskItem.setText(3, taskStatus)
				if taskStatus == "Done":
					completedTasks += 1
				try:
					totalTimeSeconds = float(self.rq.getValue(taskElement, 'totalTime')) # use float and round for millisecs
					jobTotalTimeSeconds += totalTimeSeconds
					totalTime = str(datetime.timedelta(seconds=totalTimeSeconds))
				except (TypeError, ValueError):
					totalTime = None
				renderTaskItem.setText(7, totalTime)
				renderTaskItem.setText(8, self.rq.getValue(taskElement, 'slave'))
				renderTaskItem.setText(9, self.rq.getValue(taskElement, 'command'))

			renderJobItem.setText(0, self.rq.getValue(jobElement, 'name'))
			renderJobItem.setText(1, jobElement.get('id'))
			percentComplete = (float(completedTasks) / float(len(taskElements))) * 100

			if percentComplete == 0:
				jobStatus = "Queued"
			elif percentComplete == 100:
				jobStatus = "Done"
			else:
				jobStatus = "In Progress (%d%%)" %percentComplete
			self.rq.setStatus(jobElement.get('id'), jobStatus) # write to xml
			renderJobItem.setText(3, jobStatus)

			# if percentComplete > 0:
			# 	if percentComplete >= 100:
			# 		jobStatus = "Done"
			# 	else:
			# 		jobStatus = "In Progress (%d%%)" %percentComplete
			# 	self.rq.setStatus(jobElement.get('id'), jobStatus) # write to xml
			# 	renderJobItem.setText(3, jobStatus)
			# else:
			# 	renderJobItem.setText(3, self.rq.getValue(jobElement, 'status'))

			renderJobItem.setText(2, self.rq.getValue(jobElement, 'frames'))
			renderJobItem.setText(4, self.rq.getValue(jobElement, 'priority'))
			renderJobItem.setText(5, self.rq.getValue(jobElement, 'user'))
			renderJobItem.setText(6, self.rq.getValue(jobElement, 'submitTime'))
			try:
				jobTotalTime = str(datetime.timedelta(seconds=jobTotalTimeSeconds))
			except (TypeError, ValueError):
				jobTotalTime = None
			renderJobItem.setText(7, str(jobTotalTime))

			# Retain selection

			# Expand tree item(s)
			# if self.rq.getValue(jobElement, 'status') == "In Progress":
			# 	renderJobItem.setExpanded(True)

			# Resize columns
			for i in range(0, self.ui.renderQueue_treeWidget.columnCount()):
				self.ui.renderQueue_treeWidget.resizeColumnToContents(i)

			# Hide ID column
			self.ui.renderQueue_treeWidget.setColumnHidden(1, True)

			# Sort by submit time column
			self.ui.renderQueue_treeWidget.sortByColumn(6, QtCore.Qt.DescendingOrder)


	def deleteRenderJob(self):
		""" Removes selected render job from the database and updates the view.
		"""
		jobIDs = []

		try:
			for item in self.ui.renderQueue_treeWidget.selectedItems():
				if not item.parent(): # if item has no parent then it must be a top level item, and therefore also a job
					jobIDs.append( int(item.text(1)) )

			for jobID in jobIDs:
				print "Deleting job: ID %d" %jobID
				self.rq.deleteJob(jobID)

			self.updateRenderQueueView()

		except ValueError:
			pass


	def completeTask(self):
		""" Mark the selected task as completed.
		"""
		jobTaskIDs = [] # this will hold a tuble containing (job id, task id)

		try:
			for item in self.ui.renderQueue_treeWidget.selectedItems():
				if item.parent(): # if item has parent then it must be a subitem, and therefore also a task
					jobTaskID = int(item.parent().text(1)), int(item.text(1))
					jobTaskIDs.append(jobTaskID)

			for jobTaskID in jobTaskIDs:
				print "Completing task: Job ID %d, Task ID %d" %jobTaskID
				self.rq.completeTask(jobTaskID[0], jobTaskID[1], 0)

			self.updateRenderQueueView()

		except ValueError:
			pass


	def requeueTask(self):
		""" Requeue the selected task.
		"""
		jobTaskIDs = [] # this will hold a tuble containing (job id, task id)

		try:
			for item in self.ui.renderQueue_treeWidget.selectedItems():
				if item.parent(): # if item has parent then it must be a subitem, and therefore also a task
					jobTaskID = int(item.parent().text(1)), int(item.text(1))
					jobTaskIDs.append(jobTaskID)

			for jobTaskID in jobTaskIDs:
				print "Requeuing task: Job ID %d, Task ID %d" %jobTaskID
				self.rq.requeueTask(jobTaskID[0], jobTaskID[1])

			self.updateRenderQueueView()

		except ValueError:
			pass


	def changePriority(self, amount, absolute=False):
		""" Changes priority of the selected render.
		"""
		try:
			for item in self.ui.renderQueue_treeWidget.selectedItems():
				if not item.parent(): # if item has no parent then it must be a top level item, and therefore also a job
					index = int(item.text(1))
					minPriority = 0
					maxPriority = 100

					if absolute:
						newPriority = amount
					else:
						currentPriority = self.rq.getPriority(index)
						newPriority = currentPriority+amount

					if newPriority <= minPriority:
						item.setText(4, str(minPriority))
					elif newPriority >= maxPriority:
						item.setText(4, str(maxPriority))
					else:
						item.setText(4, str(newPriority))

					if absolute:
						self.updatePriority()

		except ValueError:
			pass


	def updatePriority(self):
		""" Store the changed priority value(s).
		"""
		try:
			for item in self.ui.renderQueue_treeWidget.selectedItems():
				if not item.parent(): # if item has no parent then it must be a top level item, and therefore also a job
					index = int(item.text(1))
					priority = int(item.text(4))
					self.rq.setPriority(index, priority)

			self.updateRenderQueueView()

		except ValueError:
			pass

		self.ui.jobPriority_slider.setValue(0) # reset priority slider to zero when released


	def launchRenderSubmit(self):
		""" Launches GPS Submit Render dialog.
		"""
		import submit__main__
		reload(submit__main__)


	def launchRenderSlave(self):
		""" Launches GPS Render Slave dialog.
		"""
		import slave__main__
		reload(slave__main__)


	def exit(self):
		""" Exit the dialog.
		"""
		self.hide()


if __name__ == "__main__":
	app = QtGui.QApplication(sys.argv)

	# Initialise Icarus environment
	os.environ['ICWORKINGDIR'] = "N:\Dev\icarus\core\ui" # temp assignment
	sys.path.append(os.environ['ICWORKINGDIR'])
	import env__init__
	env__init__.setEnv()

	import rsc_rc # TODO: Check why this isn't working from within the UI file

	# app.setStyle('fusion') # Set UI style - you can also use a flag e.g. '-style plastique'

	# Apply UI style sheet
	qss=os.path.join(os.environ['ICWORKINGDIR'], "style.qss")
	with open(qss, "r") as fh:
		app.setStyleSheet(fh.read())

	renderQueueApp = gpsRenderQueueApp()
	renderQueueApp.show()
	sys.exit(app.exec_())

else:
	renderQueueApp = gpsRenderQueueApp()
	print renderQueueApp
	renderQueueApp.show()

