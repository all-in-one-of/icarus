#!/usr/bin/python

# [Icarus] appLauncher.py
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2017 Gramercy Park Studios
#
# Handles software application launching from Icarus, auto-generates UI,
# creates folder structures, etc.


import os
import math
import subprocess
import sys

from Qt import QtCore, QtGui, QtWidgets
import rsc_rc  # Import resource file as generated by pyside-rcc

# Import custom modules
import appPaths
import launchApps  # temp
import osOps
import sequence
import verbose


class appLauncher():

	def __init__(self, parent, frame):
		""" Setup app launcher UI panel.
		"""
		self.frame = frame
		self.parent = parent

		self.ap = appPaths.appPaths()

		self.setupIconGrid()


	def setupIconGrid(self, sortBy=None):
		""" Dynamically generate grid of tool button icons.
		"""
		ap_load = self.ap.loadXML(os.path.join(os.environ['IC_CONFIGDIR'], 'appPaths.xml'))
		# parentLayout = self.parent.ui.launchApp_verticalLayout  # TODO: detect layout automatically
		parentLayout = self.frame.findChildren(QtWidgets.QVBoxLayout, 'launchApp_verticalLayout')[0]

		# Delete any existing layouts
		for layout in parentLayout.findChildren(QtWidgets.QGridLayout):
			if "apps_gridLayout" in layout.objectName():
				for i in reversed(range(layout.count())): 
					layout.itemAt(i).widget().deleteLater()
				layout.deleteLater()

		item_index = 0
		app_ls = self.ap.getLaunchApps(sortBy=sortBy)
		num_items = len(app_ls)
		rows = self.getRows(num_items)
		for row, num_row_items in enumerate(rows):
			# Create grid layout
			icon_size = self.calcIconSize(num_row_items)
			row_gridLayout = QtWidgets.QGridLayout()
			row_gridLayout.setObjectName("apps_gridLayout%d" %row)
			parentLayout.insertLayout(row, row_gridLayout)
			for col in range(num_row_items):
				self.createIcon(app_ls[item_index], icon_size, row_gridLayout, col)
				item_index += 1


	def createIcon(self, app, iconSize, layout, column):
		""" Create tool button icon.
		"""
		appName = app.get('id')
		displayName = app.get('name')

		# print(layout.objectName(), column, appName)

		toolButton = QtWidgets.QToolButton(self.frame)

		sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Maximum)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(toolButton.sizePolicy().hasHeightForWidth())
		toolButton.setSizePolicy(sizePolicy)
		icon = QtGui.QIcon()
		icon.addPixmap(QtGui.QPixmap(":/rsc/rsc/app_icon_%s.png" %appName), QtGui.QIcon.Normal, QtGui.QIcon.Off)
		icon.addPixmap(QtGui.QPixmap(":/rsc/rsc/app_icon_%s_disabled.png" %appName), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
		toolButton.setIcon(icon)
		toolButton.setIconSize(QtCore.QSize(iconSize[0], iconSize[1]))  # Vary according to number of items in row - QSize won't accept tuple
		toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
		toolButton.setObjectName("%s_toolButton" %appName)
		toolButton.setToolTip("Launch %s" %displayName)
		toolButton.setStatusTip("Launch %s" %displayName)
		toolButton.setText(displayName)

		# Connect signals & slots
		toolButton.clicked.connect(lambda: self.launchApp(displayName))

		# # Add popup menus
		# toolButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
		# for entry in submenus:
		# 	action = QtWidgets.QAction(menuName, None)
		# 	action.triggered.connect(lambda: self.launchApp(displayName, flags))
		# 	toolButton.addAction(action)

		layout.addWidget(toolButton, 0, column, 1, 1)  # CHECK THIS!
		# layout.addWidget(toolButton)


	def getRows(self, num_items):
		""" Calculate icon grid arrangement.
			Returns an integer list with each item representing the number of
			icons in each row.
		"""
		if num_items < 5:  # Was 4
			num_rows = 1
		elif num_items < 11:
			num_rows = 2
		else:
			num_rows = math.ceil(num_items/5)

		max_row_width = math.ceil(num_items/num_rows)

		rows = []
		for i in range(num_rows):
			rows.append(max_row_width)

		i = 0
		while sum(rows) > num_items:
			rows[i] -= 1
			i += 1

		rows.sort()
		return rows


	def calcIconSize(self, num_items):
		""" Calculate icon size based on the number of icons in the row.
		"""
		if num_items == 5:
			icon_size = 40, 40
		elif num_items == 4:
			icon_size = 48, 48
		elif num_items == 3:
			icon_size = 56, 56
		elif num_items == 2:
			icon_size = 64, 64
		elif num_items == 1:
			icon_size = 80, 80
		else:
			icon_size = 48, 48

		return icon_size


	def launchApp(self, app):
		""" Launches an application.
		"""
		launchApps.launch(app)
		# if self.boolMinimiseOnAppLaunch:
		# 	self.showMinimized()


