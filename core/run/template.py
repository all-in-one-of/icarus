#!/usr/bin/python

# [Icarus] source_filename.py
#
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2013-2017 Gramercy Park Studios
#
# Description.


# import argparse
import os
import sys

# ----------------------------------------------------------------------------
# Environment detection
# ----------------------------------------------------------------------------

# os.environ['IC_ENV'] = "STANDALONE"

# try:
# 	import maya.cmds as mc
# 	os.environ['IC_ENV'] = "MAYA"
# except ImportError:
# 	pass

# try:
# 	import nuke
# 	import nukescripts
# 	os.environ['IC_ENV'] = "NUKE"
# except ImportError:
# 	pass

# if os.environ['IC_ENV'] == "STANDALONE":
# 	# # Parse command-line arguments
# 	# parser = argparse.ArgumentParser()
# 	# parser.add_argument("-u", "--user", help="override username")
# 	# args = parser.parse_args()
# 	# if args.user:
# 	# 	os.environ['IC_USERNAME'] = args.user.lower()

# 	# Initialise Icarus environment and add libs to sys path
# 	import env__init__
# 	env__init__.setEnv()

# ----------------------------------------------------------------------------
# Import custom modules
# ----------------------------------------------------------------------------

from Qt import QtCore, QtGui, QtWidgets
# import rsc_rc  # Import resource file as generated by pyside-rcc

# Import custom modules
# Note: publish modules are imported on demand rather than all at once at
# beginning of file.
# import jobs
# import launchApps
# import openDirs
# import osOps
# import pblChk
# import pblOptsPrc
# import sequence
# # import setJob
# import userPrefs
# import verbose


# ----------------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------------

VENDOR = "Gramercy Park Studios"
COPYRIGHT = "(c) 2013-2017"
DEVELOPERS = "Nuno Pereira, Mike Bonnington"

# Set window title and object names
WINDOW_TITLE = "Icarus"
WINDOW_OBJECT = "icarusTemplateUI"

# Set the UI and the stylesheet
UI_FILE = "icarus_ui.ui"
STYLESHEET = "style.qss"  # Set to None to use the parent app's stylesheet

# Other options
DOCK_WITH_MAYA_UI = False
DOCK_WITH_NUKE_UI = False


# ----------------------------------------------------------------------------
# DCC application helper functions
# ----------------------------------------------------------------------------

def _maya_delete_ui():
	""" Delete existing UI in Maya.
	"""
	if mc.window(WINDOW_OBJECT, q=True, exists=True):
		mc.deleteUI(WINDOW_OBJECT)  # Delete window
	if mc.dockControl('MayaWindow|' + WINDOW_TITLE, q=True, exists=True):
		mc.deleteUI('MayaWindow|' + WINDOW_TITLE)  # Delete docked window


def _nuke_delete_ui():
	""" Delete existing UI in Nuke.
	"""
	for obj in QtWidgets.QApplication.allWidgets():
		if obj.objectName() == WINDOW_OBJECT:
			obj.deleteLater()


def _maya_main_window():
	""" Return Maya's main window.
	"""
	for obj in QtWidgets.QApplication.topLevelWidgets():
		if obj.objectName() == 'MayaWindow':
			return obj
	raise RuntimeError("Could not find MayaWindow instance")


def _nuke_main_window():
	""" Returns Nuke's main window.
	"""
	for obj in QtWidgets.QApplication.topLevelWidgets():
		if (obj.inherits('QMainWindow') and obj.metaObject().className() == 'Foundry::UI::DockMainWindow'):
			return obj
	raise RuntimeError("Could not find DockMainWindow instance")


def _nuke_set_zero_margins(widget_object):
	""" Remove Nuke margins when docked UI.
		More info:
		https://gist.github.com/maty974/4739917
	"""
	parentApp = QtWidgets.QApplication.allWidgets()
	parentWidgetList = []
	for parent in parentApp:
		for child in parent.children():
			if widget_object.__class__.__name__ == child.__class__.__name__:
				parentWidgetList.append(parent.parentWidget())
				parentWidgetList.append(parent.parentWidget().parentWidget())
				parentWidgetList.append(parent.parentWidget().parentWidget().parentWidget())

				for sub in parentWidgetList:
					for tinychild in sub.children():
						try:
							tinychild.setContentsMargins(0, 0, 0, 0)
						except:
							pass


# ----------------------------------------------------------------------------
# Run functions
# ----------------------------------------------------------------------------

def run_maya():
	""" Run in Maya.
	"""
	_maya_delete_ui()  # Delete any already existing UI
	icApp = icarusApp(parent=_maya_main_window())

	# Makes Maya perform magic which makes the window stay on top in OS X and
	# Linux. As an added bonus, it'll make Maya remember the window position.
	icApp.setProperty("saveWindowPref", True)

	if not DOCK_WITH_MAYA_UI:
		icApp.show()  # Show the UI
	elif DOCK_WITH_MAYA_UI:
		allowed_areas = ['right', 'left']
		mc.dockControl(WINDOW_TITLE, label=WINDOW_TITLE, area='left', content=WINDOW_OBJECT, allowedArea=allowed_areas)


def run_nuke():
	""" Run in Nuke.

		Note:
			If you want the UI to always stay on top, replace:
			'icApp.setWindowFlags(QtCore.Qt.Tool)'
			with:
			'icApp.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)'

			If you want the UI to be modal:
			'icApp.setWindowModality(QtCore.Qt.WindowModal)'
	"""
	_nuke_delete_ui()  # Delete any already existing UI
	if not DOCK_WITH_NUKE_UI:
		icApp = icarusApp(parent=_nuke_main_window())
		icApp.setWindowFlags(QtCore.Qt.Tool)
		icApp.show()  # Show the UI
	elif DOCK_WITH_NUKE_UI:
		prefix = ''
		basename = os.path.basename(__file__)
		module_name = basename[: basename.rfind('.')]
		if __name__ == module_name:
			prefix = module_name + '.'
		panel = nukescripts.panels.registerWidgetAsPanel(
			widget=prefix + WINDOW_TITLE,  # module_name.Class_name
			name=WINDOW_TITLE,
			id='uk.co.thefoundry.' + WINDOW_TITLE,
			create=True)
		pane = nuke.getPaneFor('Properties.1')
		panel.addToPane(pane)
		icApp = panel.customKnob.getObject().widget
		_nuke_set_zero_margins(icApp)


def run_standalone():
	""" Run standalone.
	"""
	app = QtWidgets.QApplication(sys.argv)

	# Apply application style
	styles = QtWidgets.QStyleFactory.keys()
	if 'Fusion' in styles:  # Qt5
		app.setStyle('Fusion')
	elif 'Plastique' in styles:
		app.setStyle('Plastique')  # Qt4

	# Apply UI style sheet
	if STYLESHEET is not None:
		qss=os.path.join(os.environ['IC_FORMSDIR'], STYLESHEET)
		with open(qss, "r") as fh:
			app.setStyleSheet(fh.read())

	# Set application icon
	app.setWindowIcon(QtGui.QIcon(os.path.join(os.environ['IC_FORMSDIR'], "rsc", "icarus.png")))

	# Instantiate main application class
	icApp = icarusApp()

	# Set Window flags
	icApp.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowCloseButtonHint)

	# Show the application UI
	icApp.show()
	sys.exit(app.exec_())


#########################################
# RUN ICARUS WITH ENVIRONMENT AWARENESS #
#########################################

# Enable high DPI scaling
try:
	QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)
except AttributeError:
	verbose.warning("High DPI scaling not available in Qt %s. User Interface elements may not display correctly." %QtCore.qVersion())
	# pass

if __name__ == '__main__':
	run_standalone()

