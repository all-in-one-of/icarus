#!/usr/bin/python

# [Icarus] icarus__main__.py
#
# Nuno Pereira <nuno.pereira@gps-ldn.com>
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2013-2017 Gramercy Park Studios
#
# Launches and controls the main Icarus UI.


import argparse
import os
import sys

# ----------------------------------------------------------------------------
# Environment detection
# ----------------------------------------------------------------------------

os.environ['IC_ENV'] = "STANDALONE"

try:
	import maya.cmds as mc
	os.environ['IC_ENV'] = "MAYA"
except ImportError:
	pass

try:
	import nuke
	import nukescripts
	os.environ['IC_ENV'] = "NUKE"
except ImportError:
	pass

# Parse command-line arguments
if os.environ['IC_ENV'] == "STANDALONE":
	parser = argparse.ArgumentParser()
	parser.add_argument("-u", "--user", help="override username")
	args = parser.parse_args()
	if args.user:
		os.environ['IC_USERNAME'] = args.user.lower()

# Initialise Icarus environment and add libs to sys path
if os.environ['IC_ENV'] == "STANDALONE":
	import env__init__
	env__init__.setEnv()

# ----------------------------------------------------------------------------
# Import custom modules
# ----------------------------------------------------------------------------

from Qt import QtCompat, QtCore, QtGui, QtWidgets
import rsc_rc  # Import resource file as generated by pyside-rcc

# Import custom modules
# Note: publish modules are imported on demand rather than all at once at
# beginning of file.
import jobs
import launchApps
import openDirs
import osOps
import pblChk
import pblOptsPrc
import sequence
import setJob
import userPrefs
import verbose


# ----------------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------------

VENDOR = "Gramercy Park Studios"
COPYRIGHT = "(c) 2013-2017"
DEVELOPERS = "Nuno Pereira, Mike Bonnington"

# Set window title and object names
WINDOW_TITLE = "Icarus"
WINDOW_OBJECT = "icarusMainUI"

# Set the UI and the stylesheet
UI_FILE = "icarus_ui.ui"
STYLESHEET = "style.qss"  # Set to None to use the parent app's stylesheet

# Other options
DOCK_WITH_MAYA_UI = False
DOCK_WITH_NUKE_UI = False


# ----------------------------------------------------------------------------
# Main application class
# ----------------------------------------------------------------------------

class icarusApp(QtWidgets.QMainWindow):
	""" Main application class.
	"""
	def __init__(self, parent=None):
		super(icarusApp, self).__init__(parent)

		# Set object name and window title
		self.setObjectName(WINDOW_OBJECT)
		self.setWindowTitle(WINDOW_TITLE)

		# Set window flags
		self.setWindowFlags(QtCore.Qt.Window)

		# Load UI & stylesheet
		self.ui = QtCompat.load_ui(fname=os.path.join(os.environ['IC_FORMSDIR'], UI_FILE))
		if STYLESHEET is not None:
			qss=os.path.join(os.environ['IC_FORMSDIR'], STYLESHEET)
			with open(qss, "r") as fh:
				self.ui.setStyleSheet(fh.read())

		# Set the main widget
		self.setCentralWidget(self.ui)

		# Restore window geometry and state (restoreState incompatible with PyQt5)
		try:
			self.settings = QtCore.QSettings(VENDOR, WINDOW_TITLE)
			self.restoreGeometry(self.settings.value("geometry", ""))
			# self.restoreState(self.settings.value("windowState", ""))
		except:
			pass

		# Instantiate jobs class
		self.j = jobs.jobs()

		# Set up keyboard shortcuts
		self.shortcutShotInfo = QtWidgets.QShortcut(self)
		self.shortcutShotInfo.setKey('Ctrl+I')
		self.shortcutShotInfo.activated.connect(self.printShotInfo)

		self.shortcutEnvVars = QtWidgets.QShortcut(self)
		self.shortcutEnvVars.setKey('Ctrl+E')
		self.shortcutEnvVars.activated.connect(self.printEnvVars)

		self.shortcutEnvVars2 = QtWidgets.QShortcut(self)
		self.shortcutEnvVars2.setKey('Ctrl+Shift+E')
		self.shortcutEnvVars2.activated.connect(lambda: self.printEnvVars(allvars=True))

		###########################
		# Connect signals & slots #
		###########################

		self.ui.tabWidget.currentChanged.connect(self.adjustMainUI)

		# Set shot UI
		self.ui.refreshJobs_toolButton.clicked.connect(self.populateJobs)
		self.ui.job_comboBox.currentIndexChanged.connect(self.populateShots)
		self.ui.setShot_pushButton.clicked.connect(self.setupJob)
		self.ui.setNewShot_pushButton.clicked.connect(self.unlockJobUI)

		# App launch buttons - should be dynamic?
		self.ui.maya_pushButton.clicked.connect(lambda: self.launchApp('Maya'))
		self.ui.mudbox_pushButton.clicked.connect(lambda: self.launchApp('Mudbox'))
		self.ui.nuke_pushButton.clicked.connect(lambda: self.launchApp('Nuke'))
		self.ui.mari_pushButton.clicked.connect(lambda: self.launchApp('Mari'))
		self.ui.realflow_pushButton.clicked.connect(lambda: self.launchApp('RealFlow'))
		self.ui.openProdBoard_pushButton.clicked.connect(launchApps.prodBoard)
		self.ui.openReview_pushButton.clicked.connect(lambda: self.launchApp('HieroPlayer'))
		self.ui.openTerminal_pushButton.clicked.connect(launchApps.terminal)
		self.ui.browse_pushButton.clicked.connect(openDirs.openShot)
		self.ui.render_pushButton.clicked.connect(self.launchRenderQueue) # was self.launchRenderSubmit

		# Publishing UI
		# self.ui.renderPblAdd_pushButton.clicked.connect(self.renderTableAdd)
		# self.ui.renderPblRemove_pushButton.clicked.connect(self.renderTableRm)
		self.ui.renderPblSetMain_pushButton.clicked.connect(self.setLayerAsMain) # remove when render publishing works properly
		self.ui.renderPblAdd_pushButton.clicked.connect(self.renderTableAdd)
		self.ui.renderPblRemove_pushButton.clicked.connect(self.renderTableRemove)
		# self.ui.renderPblRevert_pushButton.clicked.connect(self.renderTableClear)
		self.ui.renderPbl_treeWidget.currentItemChanged.connect(self.updateRenderPublishUI)
		self.ui.renderPbl_treeWidget.itemDoubleClicked.connect(self.renderPreview)
		# self.ui.dailyPbl_treeWidget.itemDoubleClicked.connect(self.renderPreview) # remove when preview is working correctly
		self.ui.dailyPblType_comboBox.currentIndexChanged.connect(self.setDailyType)
		self.ui.dailyPblAdd_pushButton.clicked.connect(self.dailyTableAdd)
		self.ui.publish_pushButton.clicked.connect(self.initPublish)

		# Header toolbar
		self.ui.about_toolButton.clicked.connect(self.about)
		# self.ui.toolMenu_toolButton.clicked.connect(self.launchBatchRename)

		# Options
		self.ui.minimise_checkBox.stateChanged.connect(self.setMinimiseOnAppLaunch)

		# Set minimise on launch checkbox from user prefs
		self.boolMinimiseOnAppLaunch = userPrefs.config.getboolean('main', 'minimiseonlaunch')
		self.ui.minimise_checkBox.setChecked(self.boolMinimiseOnAppLaunch)


		####################################
		# Add right-click menus to buttons #
		####################################

		# Nuke
		self.ui.nuke_pushButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)

		self.actionNuke = QtWidgets.QAction("Nuke", None)
		self.actionNuke.triggered.connect(lambda: self.launchApp('Nuke'))
		self.ui.nuke_pushButton.addAction(self.actionNuke)

		self.actionNukeX = QtWidgets.QAction("NukeX", None)
		self.actionNukeX.triggered.connect(lambda: self.launchApp('NukeX'))
		self.ui.nuke_pushButton.addAction(self.actionNukeX)

		# ***Removed NukeStudio Launcher until properly supported in Icarus***
		# self.actionNukeStudio = QtWidgets.QAction("NukeStudio", None)
		# self.actionNukeStudio.triggered.connect(lambda: self.launchApp('NukeStudio'))
		# self.ui.nuke_pushButton.addAction(self.actionNukeStudio)

		# Review
		self.ui.openReview_pushButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)

		self.actionHieroPlayer = QtWidgets.QAction("HieroPlayer", None)
		self.actionHieroPlayer.triggered.connect(lambda: self.launchApp('HieroPlayer'))
		self.ui.openReview_pushButton.addAction(self.actionHieroPlayer)

		self.actionDjv = QtWidgets.QAction("djv_view", None)
		self.actionDjv.triggered.connect(launchApps.djv)
		self.ui.openReview_pushButton.addAction(self.actionDjv)

		# Browse
		self.ui.browse_pushButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)

		self.actionOpenShot = QtWidgets.QAction("Shot", None)
		self.actionOpenShot.triggered.connect(openDirs.openShot)
		self.ui.browse_pushButton.addAction(self.actionOpenShot)

		self.actionOpenJob = QtWidgets.QAction("Job", None)
		self.actionOpenJob.triggered.connect(openDirs.openJob)
		self.ui.browse_pushButton.addAction(self.actionOpenJob)

		# Render
		self.ui.render_pushButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)

		self.actionRenderQueue = QtWidgets.QAction("Render Queue", None)
		self.actionRenderQueue.triggered.connect(self.launchRenderQueue)
		self.ui.render_pushButton.addAction(self.actionRenderQueue)

		self.actionRenderSubmit = QtWidgets.QAction("Submit Render", None)
		self.actionRenderSubmit.triggered.connect(self.launchRenderSubmit)
		self.ui.render_pushButton.addAction(self.actionRenderSubmit)

		# self.actionBrowseRenders = QtWidgets.QAction("Browse Renders", None)
		# self.actionBrowseRenders.triggered.connect(self.launchRenderBrowser)
		# self.ui.render_pushButton.addAction(self.actionBrowseRenders)

		self.actionDeadlineMonitor = QtWidgets.QAction("Deadline Monitor", None)
		self.actionDeadlineMonitor.triggered.connect(lambda: self.launchApp('DeadlineMonitor'))
		self.ui.render_pushButton.addAction(self.actionDeadlineMonitor)

		self.actionDeadlineSlave = QtWidgets.QAction("Deadline Slave", None)
		self.actionDeadlineSlave.triggered.connect(lambda: self.launchApp('DeadlineSlave'))
		self.ui.render_pushButton.addAction(self.actionDeadlineSlave)

		# Tools menu
		self.ui.toolMenu_toolButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)

		self.actionJobManagement = QtWidgets.QAction("Job Management...", None)
		self.actionJobManagement.triggered.connect(self.launchJobManagement)
		self.ui.toolMenu_toolButton.addAction(self.actionJobManagement)

		self.actionShotCreator = QtWidgets.QAction("Shot Creator...", None)
		self.actionShotCreator.triggered.connect(self.launchShotCreator)
		self.ui.toolMenu_toolButton.addAction(self.actionShotCreator)

		self.actionBatchRename = QtWidgets.QAction("Batch Rename", None)
		self.actionBatchRename.triggered.connect(self.launchBatchRename)
		self.ui.toolMenu_toolButton.addAction(self.actionBatchRename)

		# self.actionRenderQueue = QtWidgets.QAction("Render Queue...", None)
		# self.actionRenderQueue.triggered.connect(self.launchRenderQueue)
		self.ui.toolMenu_toolButton.addAction(self.actionRenderQueue)

		# self.separator = QtWidgets.QAction(None)
		# self.separator.setSeparator(True)
		# self.ui.toolMenu_toolButton.addAction(self.separator)

		# self.actionIcarusSettings = QtWidgets.QAction("Global Settings...", None)
		# self.actionIcarusSettings.triggered.connect(self.globalSettings)
		# self.ui.toolMenu_toolButton.addAction(self.actionIcarusSettings)

		# self.actionUserSettings = QtWidgets.QAction("User Settings...", None)
		# self.actionUserSettings.triggered.connect(self.userSettings)
		# self.ui.toolMenu_toolButton.addAction(self.actionUserSettings)


		# Register status bar with the verbose module in order to print
		# messages to it...
		verbose.registerStatusBar(self.ui.statusbar)


		######################################
		# Adapt UI for environment awareness #
		######################################

		self.jobMngTab = self.ui.tabWidget.widget(0)
		self.publishTab = self.ui.tabWidget.widget(1)
		self.gatherTab = self.ui.tabWidget.widget(2)
		self.publishAssetTab = self.ui.publishType_tabWidget.widget(0)
		self.publishRenderTab = self.ui.publishType_tabWidget.widget(1)


		##########################
		# Standalone environment #
		##########################

		if os.environ['IC_ENV'] == 'STANDALONE':

			# Hide UI items relating to app environment(s)
			uiHideLs = ['setNewShot_pushButton', 'shotEnv_toolButton', 'appIcon_label']
			for uiItem in uiHideLs:
				hideProc = 'self.ui.%s.hide()' % uiItem
				eval(hideProc)

			# Populate 'Job' and 'Shot' drop down menus
			self.populateJobs(setLast=True)

			# Delete all tabs except 'Job Management'
			for i in range(0, self.ui.tabWidget.count()-1):
				self.ui.tabWidget.removeTab(1)

			# Delete 'ma_asset', 'nk_asset', 'Publish' tabs - REMEMBER TO UNCOMMENT THE FOLLOWING TWO LINES
			for i in range(0, 2):
				self.ui.publishType_tabWidget.removeTab(0)

			# Apply job/shot settings pop-up menu to shotEnv label (only in standalone mode)
			self.ui.shotEnv_toolButton.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)

			self.actionJobSettings = QtWidgets.QAction("Job Settings...", None)
			self.actionJobSettings.triggered.connect(self.jobSettings)
			self.ui.shotEnv_toolButton.addAction(self.actionJobSettings)

			self.actionShotSettings = QtWidgets.QAction("Shot Settings...", None)
			self.actionShotSettings.triggered.connect(self.shotSettings)
			self.ui.shotEnv_toolButton.addAction(self.actionShotSettings)

			self.ui.shotEnv_toolButton.setEnabled(True)


		####################
		# Maya environment #
		####################

		elif os.environ['IC_ENV'] == 'MAYA':
			pixmap = QtGui.QPixmap(":/rsc/rsc/app_icon_maya_disabled.png")
			self.ui.appIcon_label.setPixmap(pixmap)

			# Hide certain UI items
			uiHideLs = ['assetSubType_listWidget', 'toolMenu_toolButton']
			for uiItem in uiHideLs:
				hideProc = 'self.ui.%s.hide()' % uiItem
				eval(hideProc)

			self.connectNewSignalsSlots()
			self.populateShotLs(self.ui.publishToShot_comboBox)
			self.populateShotLs(self.ui.gatherFromShot_comboBox)
			self.updateJobLabel()
			self.ui.tabWidget.removeTab(0) # Remove 'Job Management' tab
			self.ui.publishType_tabWidget.removeTab(1) # Remove 'nk Asset' tab

			# Attempt to set the publish asset type button to remember the last selection - 'self.connectNewSignalsSlots()' must be called already
			try:
				for toolButton in self.ui.ma_assetType_frame.children():
					if isinstance(toolButton, QtWidgets.QToolButton):
						if toolButton.text() == userPrefs.config.get('main', 'lastpublishma'):
							toolButton.setChecked(True)
			except:
				pass


		####################
		# Nuke environment #
		####################

		elif os.environ['IC_ENV'] == 'NUKE':
			pixmap = QtGui.QPixmap(":/rsc/rsc/app_icon_nuke_disabled.png")
			self.ui.appIcon_label.setPixmap(pixmap)

			# Hide certain UI items
			uiHideLs = ['assetSubType_listWidget', 'toolMenu_toolButton']
			for uiItem in uiHideLs:
				hideProc = 'self.ui.%s.hide()' % uiItem
				eval(hideProc)

			self.connectNewSignalsSlots()
			self.populateShotLs(self.ui.publishToShot_comboBox)
			self.populateShotLs(self.ui.gatherFromShot_comboBox)
			self.updateJobLabel()
			self.ui.tabWidget.removeTab(0) # Remove 'Job Management' tab
			self.ui.publishType_tabWidget.removeTab(0) # Remove 'ma Asset' tab

			# Attempt to set the publish asset type button to remember the last selection - 'self.connectNewSignalsSlots()' must be called already
			try:
				for toolButton in self.ui.nk_assetType_frame.children():
					if isinstance(toolButton, QtWidgets.QToolButton):
						if toolButton.text() == userPrefs.config.get('main', 'lastpublishnk'):
							toolButton.setChecked(True)
			except:
				pass

	# End of function __init__


	#########################
	# Generic UI procedures #
	#########################

	def connectNewSignalsSlots(self):
		""" Connects new signals and slots after job and shot env is set.
		"""
		self.ui.publishType_tabWidget.currentChanged.connect(self.adjustPblTypeUI)

		for toolButton in self.ui.ma_assetType_frame.children():
			if isinstance(toolButton, QtWidgets.QToolButton):
				toolButton.toggled.connect(self.adjustPublishOptsMayaUI)
		for toolButton in self.ui.nk_assetType_frame.children():
			if isinstance(toolButton, QtWidgets.QToolButton):
				toolButton.toggled.connect(self.adjustPublishOptsNukeUI)

		# self.ui.animation_toolButton.clicked.connect(self.setDropDownToShotEnv)
		# self.ui.shot_toolButton.clicked.connect(self.setDropDownToShotEnv)
		# self.ui.comp_toolButton.clicked.connect(self.setDropDownToShotEnv) #self.adjustPblTypeUI

		self.ui.gatherFromShot_radioButton.clicked.connect(self.adjustMainUI)
		self.ui.gatherFromShot_comboBox.currentIndexChanged.connect(self.adjustMainUI)
		self.ui.gatherFromJob_radioButton.clicked.connect(self.adjustMainUI)
		self.ui.gather_pushButton.clicked.connect(self.initGather)

		self.ui.assetType_listWidget.itemClicked.connect(self.updateAssetNameCol) # currentItemChanged?
		self.ui.assetName_listWidget.itemClicked.connect(self.adjustColumns)
		self.ui.assetSubType_listWidget.itemClicked.connect(self.updateAssetVersionCol)
		self.ui.assetVersion_listWidget.itemClicked.connect(self.updateInfoField)
		self.ui.assetVersion_listWidget.itemClicked.connect(self.updateImgPreview)


	def getMainTab(self):
		""" Gets the current main tab.
		"""
		tabIndex = self.ui.tabWidget.currentIndex()
		tabText = self.ui.tabWidget.tabText(tabIndex)
		return tabIndex, tabText


	def getPblTab(self):
		""" Gets the current publish type tab.
		"""
		tabIndex = self.ui.publishType_tabWidget.currentIndex()
		tabText = self.ui.publishType_tabWidget.tabText(tabIndex)
		return tabIndex, tabText


	def adjustMainUI(self):
		""" Makes UI adjustments and connections based on which tab is
			currently selected.
		"""
		mainTabName = self.getMainTab()[1]
		if mainTabName == 'Gather' or mainTabName == 'Assets':
			self.defineColumns()
			self.updateAssetTypeCol()


	def adjustPublishOptsMayaUI(self):
		""" Makes UI adjustments based on which asset publish type is
			currently selected.
		"""
		assetType = self.sender().text()

		self.ui.ma_publishOptions_groupBox.setTitle("Publish options: %s" %assetType)

		self.ui.assetSubType_comboBox.clear()
		self.ui.textures_checkBox.setEnabled(True)
		self.ui.assetName_label.setEnabled(False)
		self.ui.assetName_lineEdit.setEnabled(False)

		if assetType == 'model':
			self.ui.assetSubType_comboBox.addItem('base')
			self.ui.assetSubType_comboBox.addItem('anim')
		elif assetType == 'rig':
			self.ui.assetSubType_comboBox.addItem('anim')
			self.ui.assetSubType_comboBox.addItem('light')
			self.ui.assetSubType_comboBox.addItem('fx')
		elif assetType == 'camera':
			self.ui.assetSubType_comboBox.addItem('render')
			self.ui.assetSubType_comboBox.addItem('mm')
			self.ui.assetSubType_comboBox.addItem('previs')
			self.ui.textures_checkBox.setEnabled(False)
			# self.lockPublishTo(lock=True)
		elif assetType == 'geo':
			self.ui.assetSubType_comboBox.addItem('abc')
			self.ui.assetSubType_comboBox.addItem('obj')
			self.ui.assetSubType_comboBox.addItem('fbx')
		elif assetType == 'geoCache':
			self.ui.assetSubType_comboBox.addItem('anim')
			self.ui.assetSubType_comboBox.addItem('cloth')
			self.ui.assetSubType_comboBox.addItem('rigidBody')
			self.ui.assetSubType_comboBox.addItem('vrmesh')
			self.ui.assetSubType_comboBox.addItem('realflow')
			self.ui.textures_checkBox.setEnabled(False)
		elif assetType == 'animation':
			self.ui.textures_checkBox.setEnabled(False)
		elif assetType == 'scene':
			self.ui.assetName_label.setEnabled(True)
			self.ui.assetName_lineEdit.setEnabled(True)
		elif assetType == 'node':
			self.ui.assetSubType_comboBox.addItem('ma')
			self.ui.assetSubType_comboBox.addItem('ic')
		# elif assetType == 'shot':
		# 	self.lockPublishTo(lock=True)

		if self.ui.assetSubType_comboBox.count():
			self.ui.assetSubType_label.setEnabled(True)
			self.ui.assetSubType_comboBox.setEnabled(True)
			self.ui.subSet_checkBox.setEnabled(False)
			self.ui.subSet_checkBox.setChecked(False)
		else:
			self.ui.assetSubType_label.setEnabled(False)
			self.ui.assetSubType_comboBox.setEnabled(False)
			self.ui.subSet_checkBox.setEnabled(True)

		# Remember last selection with entry in user prefs
		userPrefs.edit('main', 'lastpublishma', assetType)


	def adjustPublishOptsNukeUI(self):
		""" Makes UI adjustments based on which asset publish type is
			currently selected.
		"""
		assetType = self.sender().text()

		self.ui.nk_publishOptions_groupBox.setTitle("Publish options: %s" %assetType)

		self.ui.nk_PblName_label.setEnabled(True)
		self.ui.nk_PblName_lineEdit.setEnabled(True)

		if assetType == 'comp':
			self.ui.nk_PblName_label.setEnabled(False)
			self.ui.nk_PblName_lineEdit.setEnabled(False)
			# self.lockPublishTo(lock=True)

		# Remember last selection with entry in user prefs
		userPrefs.edit('main', 'lastpublishnk', assetType)


	def adjustPblTypeUI(self):
		""" Makes UI lock adjustments based on which publish type tab is
			currently selected.
		"""
		tabIndex = self.ui.publishType_tabWidget.currentIndex()
		tabText = self.ui.publishType_tabWidget.tabText(tabIndex)

		if tabText == 'ma Asset':
			self.lockPublishTo(lock=False)

		elif tabText == 'nk Asset':
			self.lockPublishTo(lock=False)
			# if self.ui.comp_toolButton.isChecked() == True:
			# 	self.lockPublishTo(lock=True)
			# 	#self.setDropDownToShotEnv()
			# else:
			# 	self.lockPublishTo(lock=False)

		elif tabText == 'Dailies':
			self.lockPublishTo(lock=True)
			#self.setDropDownToShotEnv()

		elif tabText == 'Render':
			self.lockPublishTo(lock=True)
			#self.setDropDownToShotEnv()


	def lockPublishTo(self, lock=False):
		""" Locks 'Publish To' section of UI based on selection.
		"""
		if lock:
			self.ui.publishToJob_radioButton.setEnabled(False)
			self.ui.publishToShot_radioButton.setChecked(True)
			self.ui.publishToShot_comboBox.setEnabled(False)
			self.setDropDownToShotEnv()
		else:
			self.ui.publishToJob_radioButton.setEnabled(True)
			if self.ui.publishToShot_radioButton.isChecked() == 1:
				self.ui.publishToShot_comboBox.setEnabled(True)
			#self.ui.model_toolButton.setChecked(True)


	def setDropDownToShotEnv(self):
		""" Switches the shot drop down menu to the current environment shot.
			Disables publishing to alternative shot.
		"""
		self.ui.publishToShot_comboBox.setCurrentIndex(self.ui.publishToShot_comboBox.findText(os.environ['SHOT']))


	def fileDialog(self, dialogHome):
		""" Opens a dialog from which to select a single file.
			The env check puts the main window in the background so dialog pop
			up can return properly when running inside certain applications.
			The window flags bypass a Mac bug that made the dialog always
			appear under the Icarus window. This is ignored in a Linux env.
		"""
		envOverride = ['MAYA', 'NUKE']
		if os.environ['IC_ENV'] in envOverride:
			if os.environ['IC_RUNNING_OS'] == 'Darwin':
				self.setWindowFlags(QtCore.Qt.WindowStaysOnBottomHint | QtCore.Qt.X11BypassWindowManagerHint | QtCore.Qt.WindowCloseButtonHint)
				self.show()
			dialog = QtWidgets.QFileDialog.getOpenFileName(self, self.tr('Files'), dialogHome, 'All files (*.*)')
			if os.environ['IC_RUNNING_OS'] == 'Darwin':
				self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint | QtCore.Qt.WindowCloseButtonHint)
				self.show()
		else:
			dialog = QtWidgets.QFileDialog.getOpenFileName(self, self.tr('Files'), dialogHome, 'All files (*.*)')

		return dialog[0]


	def folderDialog(self, dialogHome):
		""" Opens a dialog from which to select a folder.
			The env check puts the main window in the background so dialog pop
			up can return properly when running inside certain applications.
			The window flags bypass a Mac bug that made the dialog always
			appear under the Icarus window. This is ignored in a Linux env.
		"""
		envOverride = ['MAYA', 'NUKE']
		if os.environ['IC_ENV'] in envOverride:
			if os.environ['IC_RUNNING_OS'] == 'Darwin':
				self.setWindowFlags(QtCore.Qt.WindowStaysOnBottomHint | QtCore.Qt.X11BypassWindowManagerHint | QtCore.Qt.WindowCloseButtonHint)
				self.show()
			dialog = QtWidgets.QFileDialog.getExistingDirectory(self, self.tr('Directory'), dialogHome, QtWidgets.QFileDialog.DontResolveSymlinks | QtWidgets.QFileDialog.ShowDirsOnly)
			if os.environ['IC_RUNNING_OS'] == 'Darwin':
				self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint | QtCore.Qt.WindowCloseButtonHint)
				self.show()
		else:
			dialog = QtWidgets.QFileDialog.getExistingDirectory(self, self.tr('Directory'), dialogHome, QtWidgets.QFileDialog.DontResolveSymlinks | QtWidgets.QFileDialog.ShowDirsOnly)

		return dialog


	######################
	# Job management tab #
	######################

	def populateJobs(self, setLast=False):
		""" Populates job drop down menu.
		"""
		verbose.print_("Populating jobs combo box...", 4)

		# Block signals to prevent call to populateShots() each time a new item is added
		self.ui.job_comboBox.blockSignals(True)

		# Store last set or current item
		if setLast:
			try:
				last_item, _ = userPrefs.config.get('main', 'lastjob').split(',')
			except:
				last_item = None
		else:
			last_item = self.ui.job_comboBox.currentText()
		# print(last_item)

		# Remove all items
		self.ui.job_comboBox.clear()

		# Populate combo box with list of shots
		self.j.loadXML() # Reload jobs database
		jobLs = sorted(self.j.getActiveJobs())
		if jobLs:
			self.ui.job_comboBox.insertItems(0, jobLs)

			# Attempt to set the combo box selections to remember the last item.
			index = self.ui.job_comboBox.findText(last_item)
			# print(index)

			if index is not -1:
				self.ui.job_comboBox.setCurrentIndex(index)
				self.populateShots(setLast=setLast)
			else:
				verbose.print_("Unable to set last job.", 4)
				self.ui.job_comboBox.setCurrentIndex(0)
				self.populateShots()

			self.ui.shotSetup_groupBox.setEnabled(True)
			self.ui.shotSetupButtons_groupBox.setEnabled(True)

			# Re-enable signals so that shot list gets repopulated
			self.ui.job_comboBox.blockSignals(False)

		# If no jobs found, disable all job management UI controls
		else:
			msg = "No active jobs found"
			verbose.warning(msg)
			self.ui.job_comboBox.insertItem(0, '[%s]' %msg)
			self.ui.shot_comboBox.clear()
			self.ui.shot_comboBox.insertItem(0, '[None]')
			self.ui.shotSetup_groupBox.setEnabled(False)
			self.ui.shotSetupButtons_groupBox.setEnabled(False)

			# Warning dialog
			import pDialog
			dialogTitle = 'No Jobs Found'
			dialogMsg = 'No active jobs were found. Would you like to set up some jobs now?'
			dialog = pDialog.dialog()
			if dialog.display(dialogMsg, dialogTitle):
				self.launchJobManagement()
			else:
				pass


	def populateShots(self, setLast=False):
		""" Populates shot drop down menu.
		"""
		verbose.print_("Populating shots combo box...", 4)

		# Store last set or current item
		if setLast:
			try:
				_, last_item = userPrefs.config.get('main', 'lastjob').split(',')
			except:
				last_item = None
		else:
			last_item = self.ui.shot_comboBox.currentText()
		# print(last_item)

		# Remove all items
		self.ui.shot_comboBox.clear()

		# Populate combo box with list of shots
		selJob = self.ui.job_comboBox.currentText()
		shotLs = self.j.listShots(selJob)
		if shotLs:
			self.ui.shot_comboBox.insertItems(0, shotLs)

			# Attempt to set the combo box selections to remember the last item.
			index = self.ui.shot_comboBox.findText(last_item)
			# print(index)

			if index is not -1:
				self.ui.shot_comboBox.setCurrentIndex(index)
			else:
				verbose.print_("Unable to set last shot.", 4)
				self.ui.shot_comboBox.setCurrentIndex(0)

			self.ui.shot_comboBox.setEnabled(True)
			self.ui.setShot_label.setEnabled(True)
			self.ui.setShot_pushButton.setEnabled(True)

			return True

		# No shots detected...
		else:
			self.ui.shot_comboBox.insertItem(0, '[None]')
			self.ui.shot_comboBox.setEnabled(False)
			self.ui.setShot_label.setEnabled(False)
			self.ui.setShot_pushButton.setEnabled(False)

			# Warning dialog
			import pDialog
			dialogTitle = 'No Shots Found'
			dialogMsg = 'No shots were found for this job. Would you like to create some shots now?'
			dialog = pDialog.dialog()
			if dialog.display(dialogMsg, dialogTitle):
				self.launchShotCreator()
			else:
				pass

			return False


	def populateShotLs(self, comboBox):
		""" Populate specified combo box with shot list.
		"""
		comboBox.clear()
		shotLs = self.j.listShots(os.environ['JOB'])
		if shotLs:
			comboBox.insertItems(0, shotLs)
			comboBox.setCurrentIndex(comboBox.findText(os.environ['SHOT']))


	def updateJobUI(self):
		""" Update job tab UI with shot selection.
		"""
		self.ui.setShot_pushButton.setEnabled(True)


	def setupJob(self):
		""" Sets up shot environment, creates user directories and updates
			user job log.
		"""
		self.job = self.ui.job_comboBox.currentText()
		self.shot = self.ui.shot_comboBox.currentText()
		# if setJob.setup(self.job, self.shot):
		if self.j.setup(self.job, self.shot):
			self.adjustPblTypeUI()
			self.populateShotLs(self.ui.publishToShot_comboBox)
			self.populateShotLs(self.ui.gatherFromShot_comboBox)
			self.connectNewSignalsSlots()
			self.lockJobUI()
		else:
			dialogMsg = 'Unable to load job settings. Default values have been applied.\nPlease review the values in the job settings dialog and click Save when done.\n'
			verbose.print_(dialogMsg, 1)

			# Confirmation dialog
			import pDialog
			dialogTitle = 'Job settings not found'
			dialog = pDialog.dialog()
			dialog.display(dialogMsg, dialogTitle, conf=True)

			if self.openSettings("Job", autoFill=True):
				self.setupJob()


	def lockJobUI(self):
		""" Updates and locks UI job tab.
		"""
		self.updateJobLabel()
		self.ui.shotSetup_groupBox.setEnabled(False)
		self.ui.refreshJobs_toolButton.setEnabled(False)
		self.ui.launchApp_groupBox.setEnabled(True)
		self.ui.launchOptions_groupBox.setEnabled(True)
		self.ui.tabWidget.insertTab(1, self.publishTab, 'Publish')
		self.ui.tabWidget.insertTab(2, self.gatherTab, 'Assets')
		self.ui.gather_pushButton.hide()
		self.ui.setShot_pushButton.hide()
		self.ui.shotEnv_toolButton.show()
		self.ui.setNewShot_pushButton.show()
		self.actionJobManagement.setEnabled(False)
		self.actionShotCreator.setEnabled(False)
		verbose.jobSet(self.job, self.shot)


	def unlockJobUI(self):
		""" Unlocks UI if 'Set New Shot' is clicked.
		"""
		# Re-scan for shots
		#self.populateJobs()
		self.populateShots()

		self.ui.shotSetup_groupBox.setEnabled(True)
		self.ui.refreshJobs_toolButton.setEnabled(True)
		self.ui.launchApp_groupBox.setEnabled(False)
		self.ui.launchOptions_groupBox.setEnabled(False)

		self.ui.tabWidget.removeTab(1); self.ui.tabWidget.removeTab(1) # remove publish and assets tab - check this
		self.ui.renderPbl_treeWidget.clear() # clear the render layer tree view widget
		self.ui.dailyPbl_treeWidget.clear() # clear the dailies tree view widget
		self.ui.shotEnv_toolButton.setText('')
		self.ui.shotEnv_toolButton.hide()
		self.ui.setNewShot_pushButton.hide()
		self.ui.setShot_pushButton.show()

		self.actionJobManagement.setEnabled(True)
		self.actionShotCreator.setEnabled(True)


	def updateJobLabel(self):
		""" Updates job label tool button with the current job and shot.
		"""
		if os.environ['IC_ENV'] != 'STANDALONE':
			self.job = os.environ['JOB']
			self.shot = os.environ['SHOT']
		self.ui.shotEnv_toolButton.setText('%s - %s' % (self.job, self.shot))


	def setMinimiseOnAppLaunch(self, state):
		""" Sets state of minimise on app launch variable.
			Ultimately, this option should form part of a 'User Prefs' dialog,
			and be removed from the main UI.
		"""
		if state == QtCore.Qt.Checked:
			self.boolMinimiseOnAppLaunch = True
			userPrefs.edit('main', 'minimiseonlaunch', 'True')
		else:
			self.boolMinimiseOnAppLaunch = False
			userPrefs.edit('main', 'minimiseonlaunch', 'False')


	def printShotInfo(self):
		""" Print job / shot information stored in environment variables -
			used for debugging.
		"""
		try:
			print("""
     Job/Shot: %s - %s

  Frame range: %s

   Resolution: %s (full)
               %s (proxy)

 Linear units: %s
Angular units: %s
   Time units: %s (%s fps)
""" %(os.environ['JOB'], os.environ['SHOT'],
      os.environ['FRAMERANGE'],
      os.environ['RESOLUTION'],
      os.environ['PROXY_RESOLUTION'],
      os.environ['UNIT'],
      os.environ['ANGLE'],
      os.environ['TIMEFORMAT'], os.environ['FPS']))

		except KeyError:
			print("Environment variable(s) not set.")


	def printEnvVars(self, allvars=False):
		""" Print Icarus environment variables - used for debugging.
		"""
		try:
			for key in os.environ.keys():
				if allvars:
					print("%30s = %s" %(key, os.environ[key]))
				elif key.startswith("IC"):
					print("%30s = %s" %(key, os.environ[key]))
		except KeyError:
			print("Environment variable(s) not set.")


	def about(self):
		""" Show about dialog.
		"""
		from Qt import __binding__, __binding_version__

		python_ver_str = "%d.%d.%d" %(sys.version_info[0], sys.version_info[1], sys.version_info[2])
		pyside_ver_str = "%s %s" %(__binding__, __binding_version__)
		qt_ver_str = QtCore.qVersion()

		about_msg = """
%s

%s

Python %s / %s / Qt %s / %s
Environment: %s

Developers: %s
%s %s
""" %("   ".join(WINDOW_TITLE.upper()),
	  os.environ['IC_VERSION'],
	  python_ver_str,
	  pyside_ver_str,
	  qt_ver_str,
	  os.environ['IC_RUNNING_OS'],
	  os.environ['IC_ENV'],
	  DEVELOPERS,
	  COPYRIGHT,
	  VENDOR)

		import about
		about = about.dialog(parent=self)
		about.display(about_msg)
		# verbose.print_(about_msg, 4)


	def openSettings(self, settingsType, autoFill=False):
		""" Open settings dialog.
		"""
		if settingsType == "Job":
			categoryLs = ['job', 'time', 'resolution', 'units', 'apps', 'other']
			xmlData = os.path.join(os.environ['JOBDATA'], 'jobData.xml')
		elif settingsType == "Shot":
			categoryLs = ['time', 'resolution', 'units', 'camera']
			xmlData = os.path.join(os.environ['SHOTDATA'], 'shotData.xml')
		elif settingsType == "User":
			categoryLs = ['user', ]
			xmlData = os.path.join(os.environ['IC_USERPREFS'], 'userPrefs.xml')
		elif settingsType == "Global":
			categoryLs = ['global', ]
			xmlData = os.path.join(os.path.join(os.environ['IC_CONFIGDIR'], 'globalPrefs.xml'))

		import job_settings__main__  # Change this to generic class when it's ready
		# reload(job_settings__main__)  # Python 3 doesn't like this
		settingsEditor = job_settings__main__.settingsDialog(parent=self, settingsType=settingsType, categoryLs=categoryLs, xmlData=xmlData, autoFill=autoFill)

		@settingsEditor.customSignal.connect
		def storeAttr(attr):
			settingsEditor.currentAttr = attr  # This feels a bit hacky - need to find a way to add this function to main class

		# settingsEditor.show()
		settingsEditor.ui.exec_()
		return settingsEditor.returnValue  # Return True if user clicked Save, False for Cancel


	def jobSettings(self):
		""" Open job settings dialog wrapper function.
		"""
		if self.openSettings("Job"):
			# setJob.setup(self.job, self.shot) # Set up environment variables
			self.j.setup(self.job, self.shot) # Set up environment variables


	def shotSettings(self):
		""" Open shot settings dialog wrapper function.
		"""
		if self.openSettings("Shot"):
			# setJob.setup(self.job, self.shot) # Set up environment variables
			self.j.setup(self.job, self.shot) # Set up environment variables


	def userSettings(self):
		""" Open user settings dialog wrapper function.
		"""
		if self.openSettings("User"):
			pass


	def globalSettings(self):
		""" Open Icarus global settings dialog wrapper function.
		"""
		if self.openSettings("Global"):
			pass


	def launchApp(self, app):
		""" Launches an application from the Icarus UI.
		"""
		launchApps.launch(app)
		if self.boolMinimiseOnAppLaunch:
			self.showMinimized()


	# def launchTerminal(self):
	# 	""" Launches terminal and locks tool button.
	# 	"""
	# 	launchApps.terminal()
	# 	if self.boolMinimiseOnAppLaunch:
	# 		self.showMinimized()


	def preview(self, path=None):
		""" Preview - opens djv_view to preview movie or image sequence.
		"""
		import djvOps
		verbose.launchApp('djv_view')
		if path is None:
			djvOps.viewer(self.gatherPath)  # This is purely a bodge for asset browser - fix at a later date
		else:
			djvOps.viewer(path)


	def launchRenderSubmit(self):
		""" Launch Render Submitter window.
		"""
		import render_submit
		#render_submit.run_(frameRange='1-10', flags='-rl CurrentLayer')
		try:
			self.renderSubmitDialog.display()
			# self.renderSubmitDialog.raise_()
		except AttributeError:
			self.renderSubmitDialog = render_submit.renderSubmitDialog(parent=self)
			self.renderSubmitDialog.display()
		# renderSubmitDialog = render_submit.renderSubmitDialog(parent=self)
		# renderSubmitDialog.display()


	def launchRenderQueue(self):
		""" Launch Render Queue Manager window.
		"""
		import render_queue__main__
		try:
			self.renderQueueApp.show()
			self.renderQueueApp.raise_()
		except AttributeError:
			self.renderQueueApp = render_queue__main__.renderQueueApp()
			self.renderQueueApp.show()


	# def launchRenderBrowser(self):
	# 	""" Launch Render Browser window.
	# 	"""
	# 	import rb__main__
	# 	# reload(rb__main__)  # Python 3 doesn't like this


	def launchBatchRename(self):
		""" Launch Batch Rename tool.
		"""
		import rename__main__
		# reload(rename__main__)  # Python 3 doesn't like this

		try:
			self.batchRenameApp.show()
			self.batchRenameApp.raise_()
		except AttributeError:
			self.batchRenameApp = rename__main__.batchRenameApp(parent=self)
			self.batchRenameApp.show()


	def launchJobManagement(self):
		""" Launch Job Management dialog.
		"""
		import job_management__main__
		jobManagementDialog = job_management__main__.jobManagementDialog(parent=self)
		if jobManagementDialog.display():  # Return True if user clicked Save, False for Cancel
			self.populateJobs()


	def launchShotCreator(self):
		""" Launch Shot Creator dialog.
		"""
		import shot_creator__main__
		shotCreatorDialog = shot_creator__main__.shotCreatorDialog(parent=self)
		shotCreatorDialog.display(job=self.ui.job_comboBox.currentText())
		self.populateJobs()


	# def launchGenericDialog(self, module_name, class_name, modal=True):
	# 	""" Launch generic dialog.
	# 	"""
	# 	importProc = "import %s" %module_name
	# 	instProc = "self.%s = %s.%s(parent=self)" %(class_name, module_name, class_name)
	# 	if modal:
	# 		showProc = "self.%s.ui.exec_()" %class_name
	# 	else:
	# 		showProc = "self.%s.ui.show()" %class_name

	# 	eval(importProc)
	# 	try:
	# 		eval(showProc)
	# 	except AttributeError:
	# 		eval(instProc)
	# 		eval(showProc)


	###############
	# Publish tab #
	###############

	###################adjusting ui####################				


#	#populates the render publish table
#	def renderTableAdd(self):
#		#processes latest path added to self.renderPaths
#		renderPath = self.renderPblBrowse()
#		renderPath = renderPath.replace(os.environ['SHOTPATH'], '$SHOTPATH')
#		renderDic = {}
#		if renderPath:
#			renderDic = pblOptsPrc.renderPath_prc(renderPath)
#		if renderDic:
#			autoMainLayer = None
#			for layer in renderDic.keys():
#				layerPath = renderDic[layer]
#				layerItem = QtGui.QTableWidgetItem(layer)
#				pathItem = QtGui.QTableWidgetItem(layerPath)
#				mainItem = QtGui.QTableWidgetItem()
#				#check if layers already exist
#				layerChk = True
#				rowCount = self.ui.renderPbl_tableWidget.rowCount()
#				for row in range(0, rowCount):
#					if layer == self.ui.renderPbl_tableWidget.item(row, 0).text():
#						layerChk = False
#						break
#				#adding items and locking table
#				if layerChk:
#					newRow = self.ui.renderPbl_tableWidget.insertRow(0)
#					self.ui.renderPbl_tableWidget.setItem(0, 0, layerItem)
#					layerItem.setFlags(~QtCore.Qt.ItemIsEditable)
#					self.ui.renderPbl_tableWidget.setItem(0, 1, pathItem)
#					pathItem.setFlags(~QtCore.Qt.ItemIsEditable)
#					self.ui.renderPbl_tableWidget.setItem(0, 2, mainItem)
#					mainItem.setFlags(~QtCore.Qt.ItemIsEditable)
#					mainItem.setText('layer')
#					self.ui.renderPbl_tableWidget.resizeColumnsToContents()
#					#making layer main if autoDetected
#					if layer == 'main':
#						autoMainLayer = layerItem
#						self.setLayerAsMain(autoMainLayer)
#					elif layer in ('masterLayer', 'master', 'beauty'):
#						if not autoMainLayer:
#							autoMainLayer = layerItem
#							self.setLayerAsMain(autoMainLayer)

#	#removes items from the render table
#	def renderTableRm(self):
#		rmRowLs = []
#		for selIndex in self.ui.renderPbl_tableWidget.selectedIndexes():
#			selItem = self.ui.renderPbl_tableWidget.itemFromIndex(selIndex)
#			selRow = self.ui.renderPbl_tableWidget.row(selItem)
#			if selRow not in rmRowLs:
#				rmRowLs.append(selRow)
#		rmRowLs = sorted(rmRowLs, reverse=True)
#		for rmRow in rmRowLs:
#			self.ui.renderPbl_tableWidget.removeRow(rmRow)


	# #sets the selected render layer as the main layer
	# def setLayerAsMain(self, autoMainLayer=None):
	# 	font = QtGui.QFont()
	# 	for rowItem in range(0, self.ui.renderPbl_tableWidget.rowCount()):
	# 		font.setBold(False)
	# 		mainItem = self.ui.renderPbl_tableWidget.item(rowItem, 2)
	# 		mainItem.setText('layer')
	# 		mainItem.setFont(font)
	# 		#mainItem.setBackground(QtGui.QColor(34,34,34))
	# 		rowItem1 = self.ui.renderPbl_tableWidget.item(rowItem, 1)
	# 		rowItem1.setFont(font)
	# 		#rowItem1.setBackground(QtGui.QColor(34,34,34))
	# 		rowItem0 = self.ui.renderPbl_tableWidget.item(rowItem, 0)
	# 		rowItem0.setFont(font)
	# 		#rowItem0.setBackground(QtGui.QColor(34,34,34))
	# 	rowLs = []
	# 	if autoMainLayer:
	# 		selRow = self.ui.renderPbl_tableWidget.row(autoMainLayer)
	# 		rowLs.append(selRow)
	# 	else:
	# 		for selIndex in self.ui.renderPbl_tableWidget.selectedIndexes():
	# 			selItem = self.ui.renderPbl_tableWidget.itemFromIndex(selIndex)
	# 			selRow = self.ui.renderPbl_tableWidget.row(selItem)
	# 			if selRow not in rowLs and selRow != -1:
	# 				rowLs.append(selRow)
	# 	if len(rowLs) == 1:
	# 		font.setBold(True)
	# 		mainItem = self.ui.renderPbl_tableWidget.item(rowLs[0], 2)
	# 		mainItem.setText('main')
	# 		mainItem.setFont(font)
	# 		#mainItem.setBackground(QtGui.QColor(60,75,40))
	# 		passItem = self.ui.renderPbl_tableWidget.item(rowLs[0], 1)
	# 		passName = passItem.text()
	# 		passItem.setFont(font)
	# 		#passItem.setBackground(QtGui.QColor(60,75,40))
	# 		layerItem = self.ui.renderPbl_tableWidget.item(rowLs[0], 0)
	# 		layerName = passItem.text()
	# 		layerItem.setFont(font)
	# 		#layerItem.setBackground(QtGui.QColor(60,75,40))
	# 	#app hide and show forces thw window to update
	# #	app.hide()
	# #	app.show() # This was causing an issue with the UI closing so I've commented it out fot the time being. The widget still seems to auto update.


	def updateRenderPublishUI(self, current, previous):
		""" Update the render publish UI based on the current selection.
		"""
		# print self.sender()
		# print current, previous


	def renderPreview(self, item, column):
		""" Launches sequence viewer when entry is double-clicked.
		"""
		path = osOps.absolutePath(item.text(3))
		self.preview( sequence.getFirst(path) )


	def setLayerAsMain(self):
		""" Sets the selected render layer as the main layer.
		"""
		rowCount = self.ui.renderPbl_treeWidget.topLevelItemCount()
		for row in range(0, rowCount):
			item = self.ui.renderPbl_treeWidget.topLevelItem(row)
			item.setText(2, 'layer')

		for item in self.ui.renderPbl_treeWidget.selectedItems():
			# item.setText(2, 'main')
			try:
				selectedItem = self.ui.renderPbl_treeWidget.topLevelItem( self.ui.renderPbl_treeWidget.indexOfTopLevelItem(item) )
				selectedItem.setText(2, 'main')
			except AttributeError:
				verbose.warning("Only render layers (not render passes / AOVs) can be set as the main layer.")

		self.ui.renderPbl_treeWidget.resizeColumnToContents(2)


	def renderTableAdd(self):
		""" Adds entries to the render layer tree view widget.
		"""
		self.renderPath = self.folderDialog(os.environ['MAYARENDERSDIR'])
		self.renderTableUpdate()


	def renderTableRemove(self):
		""" Removes the selected entry from the render layer tree view widget.
		"""
		root = self.ui.renderPbl_treeWidget.invisibleRootItem()
		for item in self.ui.renderPbl_treeWidget.selectedItems():
			(item.parent() or root).removeChild(item)
		# for item in self.ui.renderPbl_treeWidget.selectedItems():
		# 	print self.ui.renderPbl_treeWidget.indexFromItem(item)
		# 	print type(item)
		# 	#self.ui.renderPbl_treeWidget.takeTopLevelItem( self.ui.renderPbl_treeWidget.indexOfTopLevelItem(item) )


	def renderTableUpdate(self):
		""" Populates the render layer tree view widget with entries.
		"""
		renderPath = self.renderPath
		if renderPath:
			renderLayerDirs = []

			# Get subdirectories
			subdirs = next(os.walk(renderPath))[1]
			if subdirs:
				for subdir in subdirs:
					if not subdir.startswith('.'): # ignore directories that start with a dot
						renderLayerDirs.append(subdir)
			if renderLayerDirs:
				renderLayerDirs.sort()
			else: # use parent dir
				renderLayerDirs = [os.path.basename(renderPath)]
				renderPath = os.path.dirname(renderPath)

			# self.ui.renderPbl_treeWidget.setIconSize(QtCore.QSize(128, 72))

			# Add render layers
			for renderLayerDir in renderLayerDirs:
				renderPasses = sequence.getBases(os.path.join(renderPath, renderLayerDir))

				if renderPasses: # only continue if render pass sequences exist in this directory
					renderLayerItem = QtWidgets.QTreeWidgetItem(self.ui.renderPbl_treeWidget)
					# renderLayerItem.setText(0, '%s (%d)' % (renderLayerDir, len(renderPasses)))
					renderLayerItem.setText(0, renderLayerDir)
					renderLayerItem.setText(2, 'layer')
					renderLayerItem.setText(3, osOps.relativePath(os.path.join(renderPath, renderLayerDir), 'SHOTPATH'))

					self.ui.renderPbl_treeWidget.addTopLevelItem(renderLayerItem)
					renderLayerItem.setExpanded(True)

					# Add render passes
					for renderPass in renderPasses:
						renderPassItem = QtWidgets.QTreeWidgetItem(renderLayerItem)
						path, prefix, fr_range, ext, num_frames = sequence.getSequence( os.path.join(renderPath, renderLayerDir), renderPass )

						renderPassItem.setText(0, prefix)
						renderPassItem.setText(1, fr_range)
						if not fr_range == os.environ['FRAMERANGE']: # set red text for sequence mismatch
							renderPassItem.setForeground(1, QtGui.QBrush(QtGui.QColor("#c33")))
						renderPassItem.setText(2, ext.split('.', 1)[1])
						renderPassItem.setText(3, osOps.relativePath(os.path.join(renderPath, renderLayerDir, renderPass), 'SHOTPATH'))

						self.ui.renderPbl_treeWidget.addTopLevelItem(renderPassItem)

			# Resize columns
			self.ui.renderPbl_treeWidget.resizeColumnToContents(0)
			self.ui.renderPbl_treeWidget.resizeColumnToContents(1)
			self.ui.renderPbl_treeWidget.resizeColumnToContents(2)


	def dailyTableAdd(self):
		""" Populates the dailies publish table.
		"""
		# Parse the file path
		dailyPath = self.dailyPblBrowse() # dailyPath is a full path to a file

		if dailyPath:
			self.ui.dailyPbl_treeWidget.clear()

			path, prefix, fr_range, ext, num_frames = sequence.detectSeq(dailyPath, contiguous=True, ignorePadding=False)
			padding = '.'
			if num_frames == 1:
				paddingInt = int(len(fr_range))
			else:
				paddingInt = int((len(fr_range)-1)/2)
			padding += '#' * paddingInt

			if prefix:
				dailyItem = QtWidgets.QTreeWidgetItem(self.ui.dailyPbl_treeWidget)
				dailyItem.setText(0, '%s%s%s' % (prefix, padding, ext)) # dailyItem.setText(0, '%s.[%s]%s' % (prefix, fr_range, ext))
				dailyItem.setText(1, fr_range)
				if not fr_range == os.environ['FRAMERANGE']: # set red text for sequence mismatch
					dailyItem.setForeground(1, QtGui.QBrush(QtGui.QColor("#c33")))
				dailyItem.setText(2, self.dailyType)
				dailyItem.setText(3, osOps.relativePath(path, 'SHOTPATH'))
				self.ui.dailyPbl_treeWidget.addTopLevelItem(dailyItem)
				#dailyItem.setExpanded(True)

			else:
				verbose.noSeq(os.path.basename(dailyPath))

		# Resize columns
		self.ui.dailyPbl_treeWidget.resizeColumnToContents(0)
		self.ui.dailyPbl_treeWidget.resizeColumnToContents(1)
		self.ui.dailyPbl_treeWidget.resizeColumnToContents(2)


	def setDailyType(self):
		""" Sets the dailies type and locks/unlocks the add and remove button
			accordingly.
		"""
		self.dailyType = self.ui.dailyPblType_comboBox.currentText()

		if self.dailyType:
			self.ui.dailyPblAdd_pushButton.setEnabled(True)
		else:
			self.ui.dailyPblAdd_pushButton.setEnabled(False)


	################browse dialogs###############	
	# Browse for assets to publish
	def assetPblBrowse(self):
		dialogHome = os.environ['JOBPATH']
		self.ui.pathToAsset_lineEdit.setText(self.fileDialog(dialogHome))

#	# Browse for renders to publish
#	def renderPblBrowse(self):
#		return self.folderDialog(os.environ['MAYARENDERSDIR'])

	# Browse for dailies to publish
	def dailyPblBrowse(self):
		if self.dailyType in ('modeling', 'texturing', 'animation', 'anim', 'fx', 'previs', 'tracking', 'rigging'):
			return self.fileDialog(os.environ['MAYAPLAYBLASTSDIR'])
		elif self.dailyType in ('lighting', 'shading', 'lookdev'):
			return self.fileDialog(os.environ['MAYARENDERSDIR'])
		elif self.dailyType in ('comp', ):
			return self.fileDialog(os.environ['NUKERENDERSDIR'])
		else:
			return self.fileDialog(os.environ['SHOTPATH'])


	#################getting ui options################

	def getMainPblOpts(self):
		""" Get basic publish options before publishing.
		"""
	#	self.approved, self.mail = '', ''
		self.pblNotes = self.ui.notes_textEdit.text() #.toPlainText() # Edited line as notes box is now line edit widget, not text edit
		self.pblType = self.getPblTab()[1]
		self.slShot = self.ui.publishToShot_comboBox.currentText()

		# Get path to publish to. If selected shot doesn't match shot the correct publish path is assigned based on the selected shot
		if self.ui.publishToShot_radioButton.isChecked() == 1:
			if self.slShot == os.environ['SHOT']: # publish to current shot
				self.pblTo = os.environ['SHOTPUBLISHDIR']
			else: # publish to user-specified shot
				self.pblTo = os.path.join(os.environ['JOBPATH'], self.slShot, os.environ["PUBLISHRELATIVEDIR"])
		elif self.ui.publishToJob_radioButton.isChecked() == 1: # publish to job
			self.pblTo = os.environ["JOBPUBLISHDIR"]
		elif self.ui.publishToLibrary_radioButton.isChecked() == 1: # publish to library
			self.pblTo = os.environ["GLOBALPUBLISHDIR"]

	#	if self.ui.approved_checkBox.checkState() == 2:
	#		self.approved = True
	#	if self.ui.mail_checkBox.checkState() == 2:
	#		self.mail = True


	def get_maya_assetPblOpts(self, genericAsset=False):
		""" Get Maya asset publish options.
		"""
		self.textures, self.subsetName, self.sceneName = '', '', ''
		self.chkLs = [] #self.chkLs = [self.pblNotes]
		if self.ui.textures_checkBox.checkState() == 2:
			self.textures = True
		if self.ui.subSet_checkBox.checkState() == 2:
			self.subsetName = '%s_sbs' % self.ui.subSetName_lineEdit.text()
			self.chkLs.append(self.subsetName)
		if self.ui.scene_toolButton.isChecked() == True:
			self.sceneName = self.ui.assetName_lineEdit.text()
			self.chkLs.append(self.sceneName)


	def get_nuke_assetPblOpts(self, name=True):
		""" Get Nuke asset publish options.
		"""
		self.chkLs = [] #self.chkLs = [self.pblNotes]
		if name:
			self.pblName = self.ui.nk_PblName_lineEdit.text()
			self.chkLs.append(self.pblName)


	def getDailyPblOpts(self):
		""" Get information about dailies before publishing.
		"""
		rowCount = self.ui.dailyPbl_treeWidget.topLevelItemCount()

		if rowCount == 1: # only allow one sequence to be published at a time
			dailyItem = self.ui.dailyPbl_treeWidget.topLevelItem(0)
			dailyPblOpts = (dailyItem.text(0), dailyItem.text(1), dailyItem.text(2), dailyItem.text(3))

		else:
			rowCount = None
			dailyPblOpts = None

		#self.chkLs = [self.pblNotes, rowCount]
		self.chkLs = [rowCount]
		return dailyPblOpts


	def getRenderPblOpts(self):
		""" Get information about renders before publishing. - THIS NEEDS RE-CODING
		"""
		self.renderDic = {}
		self.streamPbl, self.mainLayer = '', ''
		if self.ui.streamPbl_checkBox.checkState() == 2:
			self.streamPbl = True

		rowCount = self.ui.renderPbl_treeWidget.topLevelItemCount()
		for row in range(0, rowCount):
			renderLayerItem = self.ui.renderPbl_treeWidget.topLevelItem(row)

			layerName = renderLayerItem.text(0)
			filePath = renderLayerItem.text(3)
			self.renderDic[layerName] = filePath

			if renderLayerItem.text(2) == 'main':
				self.mainLayer = layerName

		if not rowCount:
			rowCount = None

		#self.chkLs = [self.pblNotes, rowCount]
		self.chkLs = [rowCount]
		# print self.renderDic, self.streamPbl, self.mainLayer


	def initPublish(self):
		""" Initialises publish.
			Ultimately this whole system should be rewritten.
		"""
		self.getMainPblOpts()
		# print(self.pblTo, self.pblNotes, self.pblType, self.slShot)

		###############
		# MAYA ASSETS #
		###############
		if self.pblType == 'ma Asset':

			self.get_maya_assetPblOpts()
			#print(self.chkLs)
			if not pblChk.chkOpts(self.chkLs):
				return

			# Model
			elif self.ui.model_toolButton.isChecked() == True:
				import ma_mdlPbl
				subtype = self.ui.assetSubType_comboBox.currentText()
				ma_mdlPbl.publish(self.pblTo, self.slShot, subtype, self.textures, self.pblNotes)
				#assetPublish.publish(genericOpts, 'ma_model', assetTypeOpts)

			# Rig
			elif self.ui.rig_toolButton.isChecked() == True:
				import ma_rigPbl
				subtype = self.ui.assetSubType_comboBox.currentText()
				ma_rigPbl.publish(self.pblTo, self.slShot, subtype, self.textures, self.pblNotes)

			# Camera
			if self.ui.camera_toolButton.isChecked() == True:
				import ma_camPbl
				subtype = self.ui.assetSubType_comboBox.currentText()
				ma_camPbl.publish(self.pblTo, self.slShot, subtype, self.pblNotes)

			# Geo
			elif self.ui.geo_toolButton.isChecked() == True:
				import ma_geoPbl
				subtype = self.ui.assetSubType_comboBox.currentText()
				ma_geoPbl.publish(self.pblTo, self.slShot, subtype, self.textures, self.pblNotes)

			# Geo cache
			elif self.ui.geoCache_toolButton.isChecked() == True:
				import ma_geoChPbl
				subtype = self.ui.assetSubType_comboBox.currentText()
				ma_geoChPbl.publish(self.pblTo, self.slShot, subtype, self.pblNotes)

			# Animation
			elif self.ui.animation_toolButton.isChecked() == True:
				import ma_animPbl
				ma_animPbl.publish(self.pblTo, self.slShot, self.pblNotes)

			# Shader
			elif self.ui.shader_toolButton.isChecked() == True:
				import ma_shdPbl
				ma_shdPbl.publish(self.pblTo, self.slShot, self.subsetName, self.textures, self.pblNotes)

			# FX
			elif self.ui.fx_toolButton.isChecked() == True:
				import ma_fxPbl
				ma_fxPbl.publish(self.pblTo, self.slShot, self.subsetName, self.textures, self.pblNotes)

			# Point cloud
			elif self.ui.ma_pointCloud_toolButton.isChecked() == True:
				import ma_pointCloudPbl
				ma_pointCloudPbl.publish(self.pblTo, self.slShot, self.subsetName, self.textures, self.pblNotes)

			# Shot
			elif self.ui.shot_toolButton.isChecked() == True:
				import ma_shotPbl
				ma_shotPbl.publish(self.pblTo, self.pblNotes) # self.subsetName, self.textures ?

			# Scene
			elif self.ui.scene_toolButton.isChecked() == True:
				import ma_scnPbl
				ma_scnPbl.publish(self.pblTo, self.slShot, self.sceneName, self.subsetName, self.textures, self.pblNotes)

			# Node
			elif self.ui.ma_node_toolButton.isChecked() == True:
				import ma_nodePbl
				subtype = self.ui.assetSubType_comboBox.currentText()
				ma_nodePbl.publish(self.pblTo, self.slShot, subtype, self.textures, self.pblNotes)

		###############
		# NUKE ASSETS #
		###############
		if self.pblType == 'nk Asset':

			self.get_nuke_assetPblOpts()
			# if not pblChk.chkOpts(self.chkLs):
			# 	return

			# Card
			if self.ui.card_toolButton.isChecked() == True:
				import nk_setupPbl
				self.pblType = 'card'
				nk_setupPbl.publish(self.pblTo, self.slShot, self.pblType, self.pblName, self.pblNotes)

			# Point cloud
			elif self.ui.nk_pointCloud_toolButton.isChecked() == True:
				import nk_setupPbl
				self.pblType = 'pointCloud'
				nk_setupPbl.publish(self.pblTo, self.slShot, self.pblType, self.pblName, self.pblNotes)

			# Node
			elif self.ui.nk_node_toolButton.isChecked() == True:
				import nk_setupPbl
				self.pblType = 'node'
				nk_setupPbl.publish(self.pblTo, self.slShot, self.pblType, self.pblName, self.pblNotes)

			# Comp
			elif self.ui.comp_toolButton.isChecked() == True:
				self.get_nuke_assetPblOpts(name=False)
				# if not pblChk.chkOpts(self.chkLs):  # Check for entries in mandatory fields
				# 	return
				import nk_compPbl
				self.pblType = 'comp'
				nk_compPbl.publish(self.pblTo, self.slShot, self.pblType, self.pblNotes)

			# Pre-comp
			elif self.ui.precomp_toolButton.isChecked() == True:
				import nk_setupPbl
				self.pblType = 'preComp'
				nk_setupPbl.publish(self.pblTo, self.slShot, self.pblType, self.pblName, self.pblNotes)

			# Setup
			elif self.ui.setup_toolButton.isChecked() == True:
				import nk_setupPbl
				self.pblType = 'setup'
				nk_setupPbl.publish(self.pblTo, self.slShot, self.pblType, self.pblName, self.pblNotes)	

		###########
		# DAILIES #
		###########
		elif self.pblType == 'Dailies':
			import ic_dailyPbl;
			self.getDailyPblOpts() # required just to get self.checkLs
			if not pblChk.chkOpts(self.chkLs):  # Check for entries in mandatory fields
				return
			ic_dailyPbl.publish(self.getDailyPblOpts(), self.pblTo, self.pblNotes)

		###########
		# RENDERS #
		###########
		elif self.pblType == 'Render':
			import ic_renderPbl
			self.getRenderPblOpts()
			# if not pblChk.chkOpts(self.chkLs):  # Check for entries in mandatory fields
			# 	return
			ic_renderPbl.publish(self.renderDic, self.pblTo, self.mainLayer, self.streamPbl, self.pblNotes)


	##############
	# Gather tab #
	##############

	#ui adjustments
	def adjustGatherTab(self, showGatherButton = False):
		self.ui.gather_pushButton.setEnabled(False)
		if showGatherButton:
			self.ui.gather_pushButton.setEnabled(True)


	def getGatherFrom(self):
		""" Get location from which to gather assets.
		"""
		slShot = self.ui.gatherFromShot_comboBox.currentText()

		# Get path to gather from. If selected shot doesn't match shot the correct publish path is assigned based on the selected shot
		if self.ui.gatherFromShot_radioButton.isChecked() == 1:
			if slShot == os.environ['SHOT']: # gather from current shot
				self.gatherFrom = os.environ['SHOTPUBLISHDIR']
			else: # gather from user-specified shot
				self.gatherFrom = os.path.join(os.environ['JOBPATH'], slShot, os.environ["PUBLISHRELATIVEDIR"])
		elif self.ui.gatherFromJob_radioButton.isChecked() == 1: # gather from job
			self.gatherFrom = os.environ['JOBPUBLISHDIR']
		elif self.ui.gatherFromLibrary_radioButton.isChecked() == 1: # gather from library
			self.gatherFrom = os.environ["GLOBALPUBLISHDIR"]


	###################columns system, info and preview img update##################
	#defines columns to shorten name
	def defineColumns(self):
		self.aTypeCol = self.ui.assetType_listWidget
		self.aNameCol = self.ui.assetName_listWidget
		self.aSubTypeCol = self.ui.assetSubType_listWidget
		self.aVersionCol = self.ui.assetVersion_listWidget

	#clears columns
	def clearColumn(self, column):
		for i in range(0, column.count()):
			column.takeItem(0)
	
	#returns a list of items to display in gather based on running environment
	def getAssetEnvPrefix(self):
		if os.environ['IC_ENV'] == 'MAYA':
			return ('ma', 'ic')
		elif os.environ['IC_ENV'] == 'NUKE':
			return ('nk', 'ic', 'render')
		else:
			return ('ma', 'nk', 'ic', 'render', 'daily', 'dailies') # daily -> dailies
		
	#populates columns
	def fillColumn(self, column, searchPath):
		envPrefix = self.getAssetEnvPrefix()
		itemLs = os.listdir(searchPath); itemLs.sort()
		#making in progress publishes not visible
		if column == self.aVersionCol:
			for item in itemLs:
				if os.path.isdir(os.path.join(searchPath, item)):
					if 'in_progress.tmp' in os.listdir(os.path.join(searchPath, item)):
						itemLs.remove(item)
			#reversing order to facilitate user gather
			itemLs.reverse()
		if column == self.aTypeCol:
			for item in itemLs:
				if item[:2] in envPrefix or item in envPrefix:
					column.addItem(item)
		else:
			for item in itemLs:
				if not item.startswith('.'):
					column.addItem(item)
		#column.item(0).setSelected(True) # select the first item automatically
		#self.updateInfoField()
		#self.updateImgPreview()
	
	#adjust UI columns to accodmodate assetSubType column
	def adjustColumns(self):
		#checks for versioned items inside assetName folder. If not found displays subset column
		self.getGatherFrom()
		self.assetName = self.aNameCol.currentItem().text()
		vItemsPath = os.path.join(self.gatherFrom, self.assetType, self.assetName)
		if not pblChk.versionedItems(vItemsPath, vb=False):
			self.subType = True
			self.ui.assetSubType_listWidget.show()
			self.updateAssetSubTypeCol()
		else:
			self.subType = None
			self.ui.assetSubType_listWidget.hide()
			self.updateAssetVersionCol()

	#updates assetType column
	def updateAssetTypeCol(self):
		self.getGatherFrom()
		self.adjustGatherTab()
		self.clearColumn(self.aTypeCol)
		self.clearColumn(self.aNameCol)
		self.clearColumn(self.aSubTypeCol)
		self.clearColumn(self.aVersionCol)
		self.ui.gatherInfo_textEdit.setText('')
	#	self.previewPlayerCtrl(hide=True)
		pixmap = QtGui.QPixmap(None)
		self.ui.gatherImgPreview_label.setPixmap(pixmap)
		self.fillColumn(self.aTypeCol, self.gatherFrom)
	
	#updates assetName column
	def updateAssetNameCol(self):
		self.adjustGatherTab()
		self.assetType = self.aTypeCol.currentItem().text()
		self.clearColumn(self.aNameCol)
		self.clearColumn(self.aSubTypeCol)
		self.clearColumn(self.aVersionCol)
		self.ui.gatherInfo_textEdit.setText('')
	#	self.previewPlayerCtrl(hide=True)
		pixmap = QtGui.QPixmap(None)
		self.ui.gatherImgPreview_label.setPixmap(pixmap)
		searchPath = os.path.join(self.gatherFrom, self.assetType)
		self.fillColumn(self.aNameCol, searchPath)

	#updates assetSubType column
	def updateAssetSubTypeCol(self):
		self.adjustGatherTab()
		self.clearColumn(self.aSubTypeCol)
		self.clearColumn(self.aVersionCol)
		self.ui.gatherInfo_textEdit.setText('')
	#	self.previewPlayerCtrl(hide=True)
		pixmap = QtGui.QPixmap(None)
		self.ui.gatherImgPreview_label.setPixmap(pixmap)
		searchPath = os.path.join(self.gatherFrom, self.assetType, self.assetName)
		self.fillColumn(self.aSubTypeCol, searchPath)

	#updates assetVersion column
	def updateAssetVersionCol(self):
		self.adjustGatherTab()
		self.clearColumn(self.aVersionCol)
		if self.subType:
			self.assetSubType = self.aSubTypeCol.currentItem().text()
		else:
			self.assetSubType = ''
		self.ui.gatherInfo_textEdit.setText('')
	#	self.previewPlayerCtrl(hide=True)
		pixmap = QtGui.QPixmap(None)
		self.ui.gatherImgPreview_label.setPixmap(pixmap)
		searchPath = os.path.join(self.gatherFrom, self.assetType, self.assetName, self.assetSubType)
		self.fillColumn(self.aVersionCol, searchPath)


	def updateImgPreview(self):
		""" Update image preview field with snapshot.
		"""
		# Apply context menu to open viewer - DO THIS SOMEWHERE ELSE
	#	self.ui.gatherImgPreview_label.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)
	#	self.actionPreview = QtWidgets.QAction("Preview...", None)
	#	self.actionPreview.triggered.connect(self.preview)
	#	self.ui.gatherImgPreview_label.addAction(self.actionPreview)

		import previewImg
		imgPath = previewImg.getImg(self.gatherPath, forceExt='jpg')
		pixmap = QtGui.QPixmap(imgPath)
		self.ui.gatherImgPreview_label.setScaledContents(True)
		self.ui.gatherImgPreview_label.setPixmap(pixmap)


	def updateInfoField(self):
		""" Update info field with notes and other relevant data.
		"""
		self.adjustGatherTab(showGatherButton = True)
		self.assetVersion = self.aVersionCol.currentItem().text()
		self.gatherPath = os.path.join(self.gatherFrom, self.assetType, self.assetName, self.assetSubType, self.assetVersion)

		import jobSettings
		# Instantiate XML data classes
		assetData = jobSettings.jobSettings()
		assetDataLoaded = assetData.loadXML(os.path.join(self.gatherPath, 'assetData.xml'))

		# If XML files don't exist, create defaults, and attempt to convert data from Python data files
		if not assetDataLoaded:
			import legacySettings

			# Try to convert from icData.py to XML (legacy assets)
			if legacySettings.convertAssetData(self.gatherPath, assetData):
				assetData.loadXML()
			else:
				return False

		# Print info to text field
		infoText = ""
		notes = assetData.getValue('asset', 'notes')
		if notes:
			infoText += "%s\n\n" % notes
		infoText += "Published by %s\n%s" % (assetData.getValue('asset', 'user'), assetData.getValue('asset', 'timestamp'))
		source = assetData.getValue('asset', 'assetSource')
		if source:
			infoText += "\nFrom '%s'" % source #os.path.basename(source)

		self.ui.gatherInfo_textEdit.setText(infoText)


	def initGather(self):
		""" Initialise gather.
		"""
		if os.environ['IC_ENV'] == 'MAYA':
			if self.assetType == 'ma_anim':
				import ma_animGather
				ma_animGather.gather(self.gatherPath)
			else:
				import ma_assetGather
				ma_assetGather.gather(self.gatherPath)

		elif os.environ['IC_ENV'] == 'NUKE':
			if self.assetType in ('ic_geo', 'ic_pointCloud'):
				import nk_geoGather
				nk_geoGather.gather(self.gatherPath)
			elif self.assetType == 'render':
				import nk_renderGather
				self.hide()
				nk_renderGather.gather(self.gatherPath)
				self.show()
			else:
				import nk_assetGather
				nk_assetGather.gather(self.gatherPath)


	def closeEvent(self, event):
		""" Store window geometry and state when closing the app.
			(incompatible with PyQt5)
		"""
		self.settings.setValue("geometry", self.saveGeometry())
		# self.settings.setValue("windowState", self.saveState())
		QtWidgets.QMainWindow.closeEvent(self, event)


# ----------------------------------------------------------------------------
# End of main application class
# ----------------------------------------------------------------------------


# ----------------------------------------------------------------------------
# DCC application helper functions
# ----------------------------------------------------------------------------

def _maya_delete_ui():
	""" Delete existing UI in Maya.
	"""
	if mc.window(WINDOW_OBJECT, q=True, exists=True):
		mc.deleteUI(WINDOW_OBJECT)  # Delete window
	if mc.dockControl('MayaWindow|' + WINDOW_TITLE, q=True, exists=True):
		mc.deleteUI('MayaWindow|' + WINDOW_TITLE)  # Delete docked window


def _nuke_delete_ui():
	""" Delete existing UI in Nuke.
	"""
	for obj in QtWidgets.QApplication.allWidgets():
		if obj.objectName() == WINDOW_OBJECT:
			obj.deleteLater()


def _maya_main_window():
	""" Return Maya's main window.
	"""
	for obj in QtWidgets.QApplication.topLevelWidgets():
		if obj.objectName() == 'MayaWindow':
			return obj
	raise RuntimeError("Could not find MayaWindow instance")


def _nuke_main_window():
	""" Returns Nuke's main window.
	"""
	for obj in QtWidgets.QApplication.topLevelWidgets():
		if (obj.inherits('QMainWindow') and obj.metaObject().className() == 'Foundry::UI::DockMainWindow'):
			return obj
	raise RuntimeError("Could not find DockMainWindow instance")


def _nuke_set_zero_margins(widget_object):
	""" Remove Nuke margins when docked UI.
		More info:
		https://gist.github.com/maty974/4739917
	"""
	parentApp = QtWidgets.QApplication.allWidgets()
	parentWidgetList = []
	for parent in parentApp:
		for child in parent.children():
			if widget_object.__class__.__name__ == child.__class__.__name__:
				parentWidgetList.append(parent.parentWidget())
				parentWidgetList.append(parent.parentWidget().parentWidget())
				parentWidgetList.append(parent.parentWidget().parentWidget().parentWidget())

				for sub in parentWidgetList:
					for tinychild in sub.children():
						try:
							tinychild.setContentsMargins(0, 0, 0, 0)
						except:
							pass


# ----------------------------------------------------------------------------
# Run functions
# ----------------------------------------------------------------------------

def run_maya():
	""" Run in Maya.
	"""
	_maya_delete_ui()  # Delete any already existing UI
	icApp = icarusApp(parent=_maya_main_window())

	# Makes Maya perform magic which makes the window stay on top in OS X and
	# Linux. As an added bonus, it'll make Maya remember the window position.
	icApp.setProperty("saveWindowPref", True)

	if not DOCK_WITH_MAYA_UI:
		icApp.show()  # Show the UI
	elif DOCK_WITH_MAYA_UI:
		allowed_areas = ['right', 'left']
		mc.dockControl(WINDOW_TITLE, label=WINDOW_TITLE, area='left', content=WINDOW_OBJECT, allowedArea=allowed_areas)


def run_nuke():
	""" Run in Nuke.

		Note:
			If you want the UI to always stay on top, replace:
			'icApp.setWindowFlags(QtCore.Qt.Tool)'
			with:
			'icApp.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)'

			If you want the UI to be modal:
			'icApp.setWindowModality(QtCore.Qt.WindowModal)'
	"""
	_nuke_delete_ui()  # Delete any already existing UI
	if not DOCK_WITH_NUKE_UI:
		icApp = icarusApp(parent=_nuke_main_window())
		icApp.setWindowFlags(QtCore.Qt.Tool)
		icApp.show()  # Show the UI
	elif DOCK_WITH_NUKE_UI:
		prefix = ''
		basename = os.path.basename(__file__)
		module_name = basename[: basename.rfind('.')]
		if __name__ == module_name:
			prefix = module_name + '.'
		panel = nukescripts.panels.registerWidgetAsPanel(
			widget=prefix + WINDOW_TITLE,  # module_name.Class_name
			name=WINDOW_TITLE,
			id='uk.co.thefoundry.' + WINDOW_TITLE,
			create=True)
		pane = nuke.getPaneFor('Properties.1')
		panel.addToPane(pane)
		icApp = panel.customKnob.getObject().widget
		_nuke_set_zero_margins(icApp)


# def run_clarisse():
# 	""" Run in Clarisse.
# 		Waiting until Clarisse purchase,
# 	"""
# 	import clarisse_icarusEventLoop
# 	try:
# 		mainApp = QtGui.QApplication(WINDOW_TITLE)
# 	except RuntimeError:
# 		mainApp = QtCore.QCoreApplication.instance()
# 	app = icarusApp()
# 	app.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint)
# 	app.show()
# 	icarus_clarisseWrap.exec_(mainApp)


def run_standalone():
	""" Run standalone.
	"""
	app = QtWidgets.QApplication(sys.argv)

	# Apply application style
	styles = QtWidgets.QStyleFactory.keys()
	if 'Fusion' in styles:  # Qt5
		app.setStyle('Fusion')
	elif 'Plastique' in styles:
		app.setStyle('Plastique')  # Qt4

	# Apply UI style sheet
	if STYLESHEET is not None:
		qss=os.path.join(os.environ['IC_FORMSDIR'], STYLESHEET)
		with open(qss, "r") as fh:
			app.setStyleSheet(fh.read())

	# Set application icon
	app.setWindowIcon(QtGui.QIcon(os.path.join(os.environ['IC_FORMSDIR'], "rsc", "icarus.png")))

	# Instantiate main application class
	icApp = icarusApp()

	# Set Window flags
	icApp.setWindowFlags(QtCore.Qt.WindowMinimizeButtonHint | QtCore.Qt.WindowCloseButtonHint)

	# Show the application UI
	icApp.show()
	sys.exit(app.exec_())


#########################################
# RUN ICARUS WITH ENVIRONMENT AWARENESS #
#########################################

# Read user prefs config file - if it doesn't exist it will be created
userPrefs.read()

# Set verbosity
try:
	os.environ['IC_VERBOSITY'] = userPrefs.config.get('main', 'verbosity')
except:
	userPrefs.edit('main', 'verbosity', '2')
	os.environ['IC_VERBOSITY'] = userPrefs.config.get('main', 'verbosity')

# Version message
verbose.icarusLaunch(WINDOW_TITLE.upper(),
					 os.environ['IC_VERSION'],
					 "%s %s" %(COPYRIGHT, VENDOR),
					 os.environ['IC_BASEDIR'],
					 os.environ['IC_USERNAME'])

# Python version check
try:
	assert sys.version_info >= (2,7)
except AssertionError:
	sys.exit("ERROR: %s requires Python version 2.7 or above." %WINDOW_TITLE)

if __name__ == '__main__':
	run_standalone()

