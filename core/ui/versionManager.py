#!/usr/bin/python

# [Icarus] versionManager.py
#
# Nuno Pereira <nuno.pereira@gps-ldn.com>
# Mike Bonnington <mike.bonnington@gps-ldn.com>
# (c) 2013-2017 Gramercy Park Studios
#
# Launches and controls the Icarus Version Manager UI.
# TODO: If XML metadata not found, fall back to legacy python icData.


import os
import sys
from Qt import QtCompat, QtCore, QtGui, QtWidgets
import rsc_rc  # Import resource file as generated by pyside-rcc

# Set the UI and the stylesheet
ui_file = "versionManager_ui.ui"
stylesheet = "style.qss"  # Set to None to use the parent app's stylesheet

# Import custom modules
import jobSettings


class dialog(QtWidgets.QDialog):
	""" Main application class.
	"""
	def __init__(self, parent=None):
		super(dialog, self).__init__(parent)

		# Load UI
		self.ui = QtCompat.load_ui(fname=ui_file)
		if stylesheet is not None:
			with open(stylesheet, "r") as fh:
				self.ui.setStyleSheet(fh.read())
		# self.ui.show()


	def dialogWindow(self, assetRootDir, version, modal=True):

		# Connect signals & slots
		self.ui.update_pushButton.clicked.connect(self.update)
		self.ui.cancel_pushButton.clicked.connect(self.cancel)
		self.ui.assetVersion_listWidget.currentItemChanged.connect(self.reloadVersionDetails)
		#self.ui.assetVersion_listWidget.itemClicked.connect(self.reloadVersionDetails)

		# Set Qt window flags
		if os.environ['IC_RUNNING_OS'] == 'Darwin':
			self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.X11BypassWindowManagerHint | QtCore.Qt.WindowCloseButtonHint)
		else:
			self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.WindowCloseButtonHint)

		# Centre window
		#self.move(QtGui.QDesktopWidget().availableGeometry(1).center() - self.frameGeometry().center())

		self.assetRootDir = os.path.expandvars(assetRootDir)

		# Instantiate XML data classes
		self.assetData = jobSettings.jobSettings()
		self.assetData.loadXML(os.path.join(self.assetRootDir, version, 'assetData.xml'), quiet=False)

		# Set asset label text
		self.ui.asset_label.setText( self.assetData.getValue('asset', 'assetPblName') )

		self.updateVersion = ''
		self.updateAssetVersionCol( self.assetData.getValue('asset', 'version'), setCurrentVersion=True )
		self.reloadVersionDetails()

		# Run dialog based on modality flag
		if modal:
			self.ui.exec_()
			return self.updateVersion
		else:
			self.ui.show()


	##################################
	# Content load/refresh functions #
	##################################

	def reloadVersionDetails(self):
		""" Reloads all details related to selected version.
		"""
		selVersion = self.ui.assetVersion_listWidget.currentItem().text()
		assetDir = os.path.join(self.assetRootDir, selVersion)

		assetDataLoaded = self.assetData.loadXML(os.path.join(assetDir, 'assetData.xml'), quiet=False)

		#--- LEGACY CODE ---#
		# If XML files don't exist, create defaults, and attempt to convert
		# data from Python data files
		if not assetDataLoaded:
			import legacySettings

			# Try to convert from icData.py to XML (legacy assets)
			if legacySettings.convertAssetData(assetDir, self.assetData):
				self.assetData.loadXML()
			else:
				return False
		#--- END LEGACY CODE ---#

		# Update image preview and info field
		self.updateImgPreview(assetDir)
		self.updateInfoField()


	def updateAssetVersionCol(self, version, setCurrentVersion=False):
		""" Update asset version list widget.
		"""
		# Get list of all asset versions
		versionLs = os.listdir(self.assetRootDir)
		versionLs = sorted(versionLs, reverse=True)

		# Clear and re-populate version list widget
		self.ui.assetVersion_listWidget.clear()
		for item in versionLs:
			if not item.startswith('.'):
				self.ui.assetVersion_listWidget.addItem(item)

		# Select the current version
		if setCurrentVersion:
			selVersionItem = self.ui.assetVersion_listWidget.findItems(version, QtCore.Qt.MatchRegExp)
			self.ui.assetVersion_listWidget.setCurrentItem(selVersionItem[0])


	def updateImgPreview(self, assetDir):
		""" Update image preview field with snapshot.
		"""
		import previewImg
		imgPath = previewImg.getImg(assetDir, forceExt='jpg')
		pixmap = QtGui.QPixmap(imgPath)
		self.ui.gatherImgPreview_label.setScaledContents(True)
		self.ui.gatherImgPreview_label.setPixmap(pixmap)


	def updateInfoField(self):
		""" Update info field with notes and other relevant data.
		"""
		infoText = ""
		notes = self.assetData.getValue('asset', 'notes')
		if notes:
			infoText += "%s\n\n" % notes
		infoText += "Published by %s\n%s" % (self.assetData.getValue('asset', 'user'), self.assetData.getValue('asset', 'timestamp'))
		source = self.assetData.getValue('asset', 'assetSource')
		if source:
			infoText += "\nFrom '%s'" % source #os.path.basename(source)

		self.ui.gatherInfo_textEdit.setText(infoText)


	############################################
	# Dialog acceptance/cancellation functions #
	############################################

	def update(self):
		self.updateVersion = self.ui.assetVersion_listWidget.currentItem().text()
		self.ui.accept()
		return #True

	def cancel(self):
		self.ui.accept()
		return #False

