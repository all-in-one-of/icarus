global proc ProceduralPipes()
{
    int $deleteEXISTING = `checkBox -q -value deleteExisting`; //assigns 1/0 value dependant on selection of checkerbox in gui
    int $ScaleSpheres = `checkBox -q -value ScaleSpheres`;
	int $GrowEnable = `checkBox -q -value GrowEnable`;
	float $sphereRadius = `floatSliderGrp -q -v SphereRadius`;
	float $sphereRadiusRandom = `floatSliderGrp -q -v SphereRadiusRandoness`;
    int $joints = `checkBox -q -value Joints`;
    int $curves = `checkBox -q -value Curves`;
    int $rebuildCurves = `checkBox -q -value RebuildCurves`;
    float $CurveSmoothness = `floatSliderGrp -q -v CurveSmoothness`; //assigns value from float slider in GUI
    int $num = `intSliderGrp -q -v num`; //assigns value from int slider in GUI
    float $CylinderWidth = `floatSliderGrp -q -v CylinderWidth`; //assigns value from float slider in GUI
    float $CylinderLength = `floatSliderGrp -q -v CylinderLength`;
    float $CylinderWidthRandomness = `floatSliderGrp -q -v CylinderWidthRandoness`;
    float $CylinderLengthRandomness = `floatSliderGrp -q -v CylinderLengthRandoness`;
    float $angleX = `floatSliderGrp -q -v angleX`;
    float $angleY = `floatSliderGrp -q -v angleY`;
    float $angleZ = `floatSliderGrp -q -v angleZ`;
    float $randomX = `floatSliderGrp -q -v randomX`;
    float $randomY = `floatSliderGrp -q -v randomY`;
    float $randomZ = `floatSliderGrp -q -v randomZ`;
    float $RandLength;
    float $RandWidth;
	float $RandWidth2;
    float $CylinderLength2;
    float $CylinderWidth2;
	float $SphereWidth2;
	
	int $CombineGeo= `checkBox -q -value CombineGeo`;
	
	string $groupName;
	$groupName = createUnique("PipeGroup");
	group -em -n $groupName; xform -os -piv 0 0 0;
	
    //Deletes any existing Pipes in a scene if the DELETE EXISTING box is checked
    if ($deleteEXISTING == 1)
    {
        deleteObjectsCalled("_Pipe");
		deleteObjectsCalled("_pipe");
        deleteObjectsCalled("_joint");
		deleteObjectsCalled("_end");
		deleteObjectsCalled("_objects");
		deleteObjectsCalled("_cylinder");
		deleteObjectsCalled("_sphere");
		deleteObjectsCalled("_PipeGroup");		
    }
	      
    //create object for-loop
    for($i=0;$i<$num;$i++)
    {   
        //Random Length/Width and <0 checks
        $RandLength = rand(0,1);
        $CylinderLength2 = $CylinderLength*(($RandLength*$CylinderLengthRandomness)+1);

        $RandWidth = rand(0,1);
        $CylinderWidth2 = $CylinderWidth*(($RandWidth*$CylinderWidthRandomness)+1);
       
        if($CylinderLength2<0)
        {
            $CylinderLength2 = 0;
        }
        if($CylinderWidth2<0.1)
        {
            $CylinderWidth2 = 0.1;
        }
       
        //moves existing grouped objects and rotates if they exist
        string $name = ("objects" + ($i-1));
        if (`objExists $name`)
            {
                select $name;
                xform -r -t 0 $CylinderLength2 0;
            }
       
        //creates sphere
        //Deletes any existing Pipes in a scene if the DELETE EXISTING box is checked
		
		$RandWidth2 = rand(0,1);
        $SphereWidth2 = $sphereRadius*(($RandWidth2*$sphereRadiusRandom)+1);
		if($SphereWidth2<0.1)
        {
            $SphereWidth2 = 0.1;
        }
		
        if ($ScaleSpheres == 1)
        {
            polySphere -r $CylinderWidth2 -n("sphere"+$i);
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
			scale $SphereWidth2  $SphereWidth2  $SphereWidth2  ("sphere"+$i);
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        }
        else
        {
			polySphere -n("sphere"+$i);
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
			scale $SphereWidth2  $SphereWidth2  $SphereWidth2 ("sphere"+$i);
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
        }
       
        //adds end sphere
        if (`objExists $name`)
        {
        }
        else
        {   
            if ($ScaleSpheres == 1)
            {
                    polySphere -r $CylinderWidth2 -n "end";
                    select "end";
                    xform -r -t 0 $CylinderLength2 0;
					makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
					scale $SphereWidth2  $SphereWidth2  $SphereWidth2  ("sphere"+$i);
					makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
					
            }
            else
            {
                    polySphere -n "end";
                    select "end";
                    xform -r -t 0 $CylinderLength2 0;
					makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
					scale $SphereWidth2  $SphereWidth2  $SphereWidth2  ("sphere"+$i);
					makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
            }
       
        }
	      
        //creates cylinder
        polyCylinder -h $CylinderLength2 -r $CylinderWidth2 -n ("cylinder" + $i);
        select ("cylinder"+$i);
        xform -r -t 0 ($CylinderLength2*0.5) 0;

        if (`objExists $name`)
            {
                select $name ("cylinder"+$i) ("sphere"+$i);
                group -n ("objects" + $i); xform -os -piv 0 0 0;
                select ("objects" + $i);
                float $RandX = rand((0-$randomX),$randomX);
                float $RandY = rand((0-$randomY),$randomY);
                float $RandZ = rand((0-$randomZ),$randomZ);
                rotate ($angleX+$RandX) ($angleY+$RandY) ($angleZ+$RandZ);
            }
        else
        {
            select ("cylinder"+$i) ("sphere"+$i) "end";
            group -n ("objects" + $i); xform -os -piv 0 0 0;
                float $RandX = rand((0-$randomX),$randomX);
                float $RandY = rand((0-$randomY),$randomY);
                float $RandZ = rand((0-$randomZ),$randomZ);
                rotate ($angleX+$RandX) ($angleY+$RandY) ($angleZ+$RandZ);
        }
    }
	
	//Adds scale attributes to Root Group
	addAttr -ln "Spherescale"  -at double -min 0 -max 10000 -dv 1 ("objects" + ($num-1));
	setAttr -e-keyable true ("objects" + ($num-1) + ".Spherescale");
	addAttr -ln "Cylinderscale"  -at double -min 0 -max 10000 -dv 1 ("objects" + ($num-1));
	setAttr -e-keyable true ("objects" + ($num-1) + ".Cylinderscale");
	//Grow Expression
	if($GrowEnable==1)
	{
		addAttr -ln "Grow"  -at double -min 0 -max 1 -dv 1 ("objects" + ($num-1));
		setAttr -e-keyable true (("objects" + ($num-1))+".Grow");
		string $attributeGrow = ("objects" + ($num-1) + ".Grow");
		expression -s (
		"if((" + $num + "*" + $attributeGrow + ")>=" + $num + ")\n{" + "visibility = 1;" + "}\n" + "else{visibility = 0;}"
		) -o ("end") -ae 1 -uc all ;
		for($i=0;$i<$num;$i++)
		{
			expression -s (
			"if((" + $num + "*" + $attributeGrow + ")>=" + ($num-$i) + ")\n{" + "visibility = 1;" + "}\n" + "else{visibility = 0;}"
			) -o ("cylinder"+$i) -ae 1 -uc all ;
			
			expression -s (
			"if(" + $attributeGrow + "== 0 )\n{" + "visibility = 0;" + "}\n"
			+ "else{if((" + $num + "*" + $attributeGrow + ")>=" + (($num-$i)-1) + ")\n{" + "visibility = 1;" + "}\n" + "else{visibility = 0;}}"
			) -o ("sphere"+$i) -ae 1 -uc all ;
			
		}
	} 

	// Links Scale to attribute
/*

	expression -s (
	"scaleX = " + $attributeScaleSphere +";\n" + 
	"scaleY = " + $attributeScaleSphere +";\n" + 
	"scaleZ = " + $attributeScaleSphere +";\n" 
	) -o ("end") -ae 1 -uc all ;

	string $attributeScaleSphere = ("objects" + ($num-1));
	for($i=0;$i<($num-1);$i++)
	{
		expression -s (
		"scaleX = " + $attributeScaleSphere +";\n" + 
		"scaleY = " + $attributeScaleSphere +";\n" + 
		"scaleZ = " + $attributeScaleSphere +";\n" 
		) -o ("cylinder"+$i) -ae 1 -uc all ;
		expression -s (
		"scaleX = " + $attributeScaleSphere +";\n" + 
		"scaleY = " + $attributeScaleSphere +";\n" + 
		"scaleZ = " + $attributeScaleSphere +";\n" 
		) -o ("sphere"+$i) -ae 1 -uc all ;
	}
*/
   
    //creates curves
    string $CurveNameForParent;
    if ($curves == 1)
    {
        string $name;
        $CurveName = createUnique(("Curve"+"_"));
        print($CurveName);
        $CurveNameForParent = $CurveName;
        print($CurveNameForParent);
        int $i = 0;
        float $SpherePos1[3];
        float $SpherePos2[3];
        string $objectName;
        $objectName = ("end");
        $SpherePos1 = `xform -worldSpace -query -translation $objectName`;
        $SpherePos2 = `xform -worldSpace -query -translation $objectName`;
        curve -d 1 -p $SpherePos1[0] $SpherePos1[1] $SpherePos1[2] -p $SpherePos2[0] $SpherePos2[1] $SpherePos2[2] -n ($CurveName+0);
        for($i=0;$i<($num-1);$i++)
        {
            $objectName = ("sphere"+$i);
            $SpherePos1 = `xform -worldSpace -query -translation $objectName`;
            $objectName = ("sphere"+($i+1));
            $SpherePos2 = `xform -worldSpace -query -translation $objectName`;
            curve -d 1 -p $SpherePos1[0] $SpherePos1[1] $SpherePos1[2] -p $SpherePos2[0] $SpherePos2[1] $SpherePos2[2] -a ($CurveName+0);   
        }
        $CurveName = createUnique(("Curve"+"_"));
        rename $CurveName;
    }   

    // creates joint hirarchy
    string $jointNameForParent;
    if ($joints == 1)
    {
        select -cl;
        string $jointName;
        string $objectName;
        float $SpherePos[3];
        $objectName = createUnique("end");
        $jointName = createUnique(("joint"+"0"+"_"));
        $jointNameForParent = $jointName;
        $SpherePos = `xform -worldSpace -query -translation $objectName`;
        joint -p $SpherePos[0] $SpherePos[1] $SpherePos[2] -n $jointName;
       
        for($i=0;$i<$num;$i++)
        {
            $objectName = ("sphere"+$i);
            $SpherePos = `xform -worldSpace -query -translation $objectName`;
            $jointName = createUnique(("joint"+($i+1)+"_"));
            joint -p $SpherePos[0] $SpherePos[1] $SpherePos[2] -n $jointName;
        }
        $jointName = createUnique(($num+"_"));
        $objectName = "sphere"+($num-1);
        $SpherePos = `xform -worldSpace -query -translation $objectName`;
        joint -p $SpherePos[0] $SpherePos[1] $SpherePos[2] -n ("joint"+$i+1);
        select -cl;
    }
   
    //Combined objects into a single poly object and names it correctly
	string $PipeName = createUnique("Pipe");
    select ("objects" + (($num)-1));
	parent $groupName;	

	if($CombineGeo==1)
	{
		select ("objects" + (($num)-1));
		polyUnite -n $PipeName;
	}
	   
	int $DeleteHistory = `checkBox -q -value DeleteHistory`;
	if($DeleteHistory==1)
	{
		DeleteHistory;
	}
   
    if ($joints == 1)
    {
        select $jointNameForParent;
		if($CombineGeo==1)
		{
			select -add $PipeName;
		}
        parent $groupName;
    }
   
    if ($curves == 1)
    {
        select $CurveNameForParent;
		if($CombineGeo==1)
		{
			select -add $groupName;
		}
		if($CombineGeo==0)
		{
			select -add $PipeName;
		}
        parent;
        reverseCurve $CurveNameForParent;
        if ($rebuildCurves == 1)
        {
            rebuildCurve -s ($num*$CurveSmoothness) $CurveNameForParent;
        }
    }   
	
	//renames to allow multiple objects
	
	RenameObjectsCalled("end","_end");
	RenameObjectsCalled("Pipe","_Pipe");
	RenameObjectsCalled("pipe","_pipe");
	RenameObjectsCalled("objects","_objects");
	RenameObjectsCalled("cylinder","_cylinder");
	RenameObjectsCalled("sphere","_sphere");
	RenameObjectsCalled("PipeGroup","_PipeGroup");
	RenameObjectsCalled("joint","_joint");
	RenameObjectsCalled("curve","_curve");
}
 
//any existing gui is deleted to make way for any newly created ones.
if (`window -exists SettingsWindow`)
    {deleteUI SettingsWindow;}
 
//Creates Window
window -widthHeight 500 300 -t "Procedural Pipe Settings" SettingsWindow;
    columnLayout;
        //creates an integer slider for the numer of objects
        intSliderGrp -l "Number of Objects" -value 20 -field true
            -minValue 1 -maxValue 50 -fieldMinValue 1 -fieldMaxValue 10000 num;
        //creates a float slider for Cylinder Width
        floatSliderGrp -l "Cylinder Width" -value 0.75 -field true
            -minValue 0 -maxValue 1 -fieldMinValue 0 -fieldMaxValue 20 CylinderWidth;
        //creates a float slider for Cylinder Width Randomness
        floatSliderGrp -l "Width Randomness" -value 0 -field true
            -minValue 0 -maxValue 2 -fieldMinValue 0 -fieldMaxValue 50 CylinderWidthRandoness;
        //creates a float slider for Cylinder Length
        floatSliderGrp -l "Cylinder Length" -value 10 -field true
            -minValue 0 -maxValue 20 -fieldMinValue 0 -fieldMaxValue 100 CylinderLength;
        //creates a float slider for Cylinder Length Randomness
        floatSliderGrp -l "Length Randomness" -value 0 -field true
            -minValue 0 -maxValue 10 -fieldMinValue 0 -fieldMaxValue 100 CylinderLengthRandoness;
		//creates a float slider for Sphere Radius
			floatSliderGrp -l "Sphere Radius" -value 1 -field true
            -minValue 0 -maxValue 5 -fieldMinValue 0 -fieldMaxValue 100 SphereRadius;
        //creates a float slider for Cylinder Length Randomness
        floatSliderGrp -l "Radius Randomness" -value 0 -field true
            -minValue 0 -maxValue 10 -fieldMinValue 0 -fieldMaxValue 100 SphereRadiusRandoness;
			
		//Creates checkbox for Combining
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow10;
            checkBox -label "Enable Grow" -value 1 GrowEnable;
        setParent ..;
           
        //Creates button and Checkbox to Create and delete existing
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow4;
            checkBox -label "Scale Spheres to Cylinders" -value 0 ScaleSpheres;
        setParent ..;
       
        //Creates checkbox for joints
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow5;
            checkBox -label "Create Joints" -value 0 Joints;
        setParent ..;
       
        //Creates checkbox for Curves
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow6;
            checkBox -label "Create Curve" -value 0 Curves;
        setParent ..;

        //creates a float slider for Curve Smoothness
        floatSliderGrp -l "Curve Smoothness" -value 1 -field true
            -minValue -0 -maxValue 5 -fieldMinValue -0 -fieldMaxValue 5 CurveSmoothness;
           
        //Creates checkbox for Curve Smoothing
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow7;
            checkBox -label "Smooth Curve" -value 0 RebuildCurves;
        setParent ..;
		//Creates checkbox for DeletingHistory
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow8;
            checkBox -label "DeleteHistory" -value 0 DeleteHistory;
        setParent ..;
		//Creates checkbox for Combining
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow9;
            checkBox -label "CombineGeo" -value 0 CombineGeo;
        setParent ..;
       
        //creates a float slider for angleX
        floatSliderGrp -l "Angle X" -value 45 -field true
            -minValue -180 -maxValue 180 -fieldMinValue 0 -fieldMaxValue 180 angleX;
        //creates a float slider for angleY
        floatSliderGrp -l "Angle Y" -value 5 -field true
            -minValue -180 -maxValue 180 -fieldMinValue 0 -fieldMaxValue 180 angleY;
        //creates a float slider for angleZ
        floatSliderGrp -l "Angle Z" -value 0 -field true
            -minValue -180 -maxValue 180 -fieldMinValue 0 -fieldMaxValue 180 angleZ;
        //creates a float slider for RANDOM X
        floatSliderGrp -l "Randomness X" -value 0 -field true
            -minValue -90 -maxValue 90 -fieldMinValue -180 -fieldMaxValue 180 randomX;
        //creates a float slider for RANDOM Y
        floatSliderGrp -l "Randomness Y" -value 0 -field true
            -minValue -90 -maxValue 90 -fieldMinValue -180 -fieldMaxValue 180 randomY;
        //creates a float slider for RANDOM Z
        floatSliderGrp -l "Randomness Z" -value 0 -field true
            -minValue -90 -maxValue 90 -fieldMinValue -180 -fieldMaxValue 180 randomZ;
           
        //Creates button and Checkbox to Create and delete existing
        rowLayout -nc 2 -cw 1 80 -cw 2 150 MainRow3;
            button -label "CREATE" -command "ProceduralPipes" createButton;
            checkBox -label "Delete Existing" -value 1 deleteExisting;
        setParent ..;
showWindow SettingsWindow;

//Procedure that returns a new unique name for an object with a given prefix
global proc string createUnique(string $prefix)
{
    string $name;
    int $endFlag = 1;
    int $n = 1;
    for($i=0;$endFlag==1;++$i)
    {
        $name = $prefix + $n;
        if(`objExists $name`)
            { ++$n; }
        else
            { $endFlag = 0; }
    }   
    return $name;
}       

//Procedure that deletes all object with a given prefix
global proc deleteObjectsCalled(string $prefix)
{
    string $Object = $prefix +"*";
    if(`objExists $Object`)
    {
        select $Object;
		delete;
    }  
}

//Procedure that deletes all object with a given prefix
global proc RenameObjectsCalled(string $prefix, string $newName)
{
    string $Object = $prefix +"*";
    if(`objExists $Object`)
    {
        select $Object;
    	string $select[] = `ls -sl`;
    	int $lastSelect = size($select);
    	for($i=0;$i<$lastSelect;$i++)
    	{
    	    if(`objExists $select[$i]`)
    	    {
    	        rename $select[$i] $newName;
    	    }
    	}
    }
}       

