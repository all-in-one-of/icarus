// [Icarus] menus2py.mel
//
// Nuno Pereira <nuno.pereira@gps-ldn.com>
// Mike Bonnington <mjbonnington@gmail.com>
// (c) 2013-2019 Gramercy Park Studios
//
// This module wraps python commands up in MEL so they can be called from Maya
// UI scripts with slightly less pain.


// File operations -----------------------------------------------------------

global proc menus2Py.newScene()
{
	python("session.scnmgr.file_new()");
}


global proc menus2Py.openScene()
{
	python("session.scnmgr.file_open_dialog()");
}


global proc menus2Py.updateRecentFilesMenu(string $menu)
{
	// There must be a better way to pass a variable from mel to python...
	global string $_menu;
	$_menu = $menu;
	python("import maya.mel as mel");
	python("menu = mel.eval('$temp=$_menu')");
	python("session.scnmgr.update_recents_menu(menu)");
}


global proc menus2Py.saveScene()
{
	python("session.scnmgr.file_save()");
}


global proc menus2Py.saveSceneAs()
{
	python("session.scnmgr.file_save_dialog()");
}


global proc menus2Py.incrementAndSave()
{
	python("session.scnmgr.file_save_new_version()");
}


// Open Icarus UI ------------------------------------------------------------

global proc menus2Py.launchIcarus()
{
	python("session.icarus.show()");
}


global proc menus2Py.shotInfo()
{
	python("from shared import shot_info; shot_info.show()");
}


global proc menus2Py.launchProdBoard()
{
	python("from shared import launchApps; launchApps.prodBoard()");
}


global proc menus2Py.projectTools()
{
	python("import os, subprocess; subprocess.call('open %s' % os.environ['PROJECTTOOLS'], shell=True)");
}


global proc menus2Py.browseScenes()
{
	python("from shared import openDirs; openDirs.openMayaScenes()");
}


global proc menus2Py.browsePlayblasts()
{
	python("from shared import openDirs; openDirs.openMayaPlayblasts()");
}


global proc menus2Py.browseRenders()
{
	python("from shared import openDirs; openDirs.openMayaRenders()");
}


global proc menus2Py.browseSourceimages()
{
	python("from shared import openDirs; openDirs.openMayaSourceimages()");
}


global proc menus2Py.browseShot()
{
	python("from shared import openDirs; openDirs.openShot()");
}


global proc menus2Py.browseJob()
{
	python("from shared import openDirs; openDirs.openJob()");
}


global proc menus2Py.updatePresetCameraMenu(string $menu)
{
	// Get the list of cameras and store it in an array
	python("import os; from shared import camPresets; cp = camPresets.CamPresets(); cp.loadXML(os.path.join(os.environ['IC_CONFIGDIR'], 'camPresets.xml'), use_template=True)");
	python("shotCam = os.environ['IC_SHOT']");
	string $camLs[] = python("[shotCam] + cp.getPresets(activeOnly=True)");

	// Delete all items in the menu
	menu -edit -deleteAllItems $menu;

	// Re-populate the items in the menu
	for ($item in $camLs)
	{
		menuItem -label $item
		         -command ("menus2Py.gpsCreateCamera(\"" + $item + "\")")
		         -parent $menu
		         $item;
	}
	menuItem -divider true -parent $menu;
	menuItem -label "Create Camera Rig"
	         -checkBox `optionVar -q icCreateCameraRig`
	         -command "menus2Py.toggleCreateCameraRig()"
	         -parent $menu
	         icCreateCameraRigMenu;
	menuItem -label "Add V-Ray Physical Camera Attributes"
	         -checkBox `optionVar -q icAddVRayPhysicalCamera`
	         -command "menus2Py.toggleAddVRayPhysicalCamera()"
	         -parent $menu
	         icAddVRayPhysicalCameraMenu;
}


global proc menus2Py.toggleCreateCameraRig()
{
	optionVar -iv icCreateCameraRig `menuItem -q -checkBox icCreateCameraRigMenu`;
}


global proc menus2Py.toggleAddVRayPhysicalCamera()
{
	optionVar -iv icAddVRayPhysicalCamera `menuItem -q -checkBox icAddVRayPhysicalCameraMenu`;
}


global proc menus2Py.gpsCreateCamera(string $cam)
{
	global string $camera;
	$camera = $cam;
	python "import maya.cmds as mc";
	python "import maya.mel as mel";
	python "camera = mel.eval('$temp=$camera')";
	python "rig = mc.optionVar( q='icCreateCameraRig' )";
	python "physical = mc.optionVar( q='icAddVRayPhysicalCamera' )";
	python "from rsc.maya.scripts import gpsCreateCamera; gpsCreateCamera.gpsCreateCamera().createCamera(camera, rig, physical)";
}


global proc menus2Py.launchVersionManager(string $nodeName)
{
	global string $icSetNodeName;
	$icSetNodeName = $nodeName;
	python "import maya.mel as mel";
	// Maya retrieves the node name in the format [currentNodeName].[originalNodeName].
	// We only need the current nodeName so everything after the '.' needs to be removed.
	python "icSetNodeName = mel.eval('$temp=$icSetNodeName'); icSetNodeName=icSetNodeName.split('.')[0]";
	python("from publish import ma_versionUpdate; ma_versionUpdate.update(ICSet=icSetNodeName)");
}


global proc menus2Py.forceOverrideComponentDisplay(string $nodeName)
{
	global string $icSetNodeName;
	$icSetNodeName = $nodeName;
	python "import maya.mel as mel";
	// Maya retrieves the node name in the format [currentNodeName].[originalNodeName].
	// We only need the current nodeName so everything after the '.' needs to be removed.
	python "icSetNodeName = mel.eval('$temp=$icSetNodeName'); icSetNodeName=icSetNodeName.split('.')[0]";
	python "from rsc.maya.scripts import mayaOps; mayaOps.removeDrawOverride(objLs=[icSetNodeName], icSet=True, hierarchy=True, shapes=True, overrideLayers=False)";
}


global proc menus2Py.bulkRename()
{
	// python("from tools.sequencerename import gpsRenameTools; gpsRenameTools.gpsRenameTools().UI()");
	python("from rsc.maya.scripts import gpsRenameTools; gpsRenameTools.gpsRenameTools().UI()");
}


global proc menus2Py.gpsPreview()
{
	python("from tools.preview import preview; preview.run_maya(session, showUI=True)");
}


global proc menus2Py.gpsPreviewNoUI()
{
	python("from tools.preview import preview; preview.run_maya(session, showUI=False)");
}


global proc menus2Py.submitRender()
{
	python("from tools.renderqueue import submit; submit.run_maya(session)");
}


global proc menus2Py.launchDjv()
{
	python("from shared import launchApps; launchApps.djv()");
}


global proc menus2Py.launchHieroPlayer()
{
	python("from shared import launchApps; launchApps.launch('HieroPlayer')");
}
