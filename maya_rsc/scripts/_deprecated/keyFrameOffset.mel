global proc KeyframeOffset()
{
    string $selection[] =`ls -sl`;
    int $NumberOfObjects = size($selection);
    float $KeyframeOffsetAmount = `floatSliderGrp -q -v KeyframeOffsetAmount`;
    float $RandomAmount = `floatSliderGrp -q -v RandomAmount`;
    float $GlobalOffsetAmount = `floatSliderGrp -q -v GlobalOffsetAmount`;
   
    for ($i = 0; $i < $NumberOfObjects; $i++)
    {
        float $randomOffset = rand((0-$RandomAmount),$RandomAmount);
        float $OffsetValue =  ($KeyframeOffsetAmount * ($i)) + $randomOffset + $GlobalOffsetAmount;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".translateX") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".translateY") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".translateZ") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".rotateX") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".rotateY") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".rotateZ") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".scaleX") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".scaleY") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".scaleZ") ;
        keyframe -e -iub true -r -o over -tc $OffsetValue  ($selection[$i]  + ".visibility") ;
    }
}

global proc SortSelection()
{
    if(`objExists ("ReOrder_Locator")`)
    { select -d "ReOrder_Locator"; }
    string $selection[] =`ls -sl`;
    int $NumberOfObjects = size($selection);
    vector $WorldPos[];
    float $number[];

    string $Axis = `radioCollection -query -select Axis`;
    
    //Warning if no locator
    if((($Axis=="locator")||($Axis=="locatorNeg"))&&(!(`objExists "ReOrder_Locator"`)))
    {print("Create Locator First!");}
    
    //Query Positions   
    for ($i = 0; $i < $NumberOfObjects; $i++)
    {
        select $selection[$i];
        string $shapeNode[] = `listRelatives -s -f`;
        string $nodeType = `nodeType $shapeNode[0]`;
        if($nodeType=="mesh")
        {
             $WorldPos[$i] = `xform -worldSpace -query -translation ($selection[$i]+".vtx[0]")`;  
        }
        else
        {
          $WorldPos[$i] = `xform -worldSpace -query -translation $selection[$i]`;
        }

        //$WorldPos[$i] = `xform -worldSpace -query -translation ($selection[$i]+".vtx[0]")`;
       
        vector $VectorTemp = $WorldPos[$i];
        if(($Axis=="X")||($Axis=="Xneg"))
            {$number[$i] = $VectorTemp.x;}
        if(($Axis=="Y")||($Axis=="Yneg"))
            {$number[$i] = $VectorTemp.y;}
        if(($Axis=="Z")||($Axis=="Zneg"))
            {$number[$i] = $VectorTemp.z;}
        if((($Axis=="locator")||($Axis=="locatorNeg"))&&(`objExists "ReOrder_Locator"`))
            {$number[$i] = DistanceBetween($selection[$i],"ReOrder_Locator");}
    }
    
    string $NewSelection[];
    //Sort Algorithm 
    if($Axis=="X")
        {$NewSelection = bubbleSort($selection, $number, 1);}
    if($Axis=="Y")
        {$NewSelection = bubbleSort($selection, $number, 1);}
    if($Axis=="Z")
        {$NewSelection = bubbleSort($selection, $number, 1);}
    if($Axis=="locator")
        {$NewSelection = bubbleSort($selection, $number, 1);}
    if($Axis=="Xneg")
        {$NewSelection = bubbleSort($selection, $number, 0);}
    if($Axis=="Yneg")
        {$NewSelection = bubbleSort($selection, $number, 0);}
    if($Axis=="Zneg")
        {$NewSelection = bubbleSort($selection, $number, 0);}
    if($Axis=="locatorNeg")
        {$NewSelection = bubbleSort($selection, $number, 0);}
    
    //Reselects in sorted order
    select -cl;
    for ($i = 0; $i < $NumberOfObjects; $i++)
    {
       select -tgl $NewSelection[$i];
    }
}

global proc string[] bubbleSort(string $names[], float $numbers[], int $direction)
{
    int $numberOfItems = size($names);
    string $tempName;
    float $tempNumber;
    int $flag = 0;
    
    if($direction==1)
    {
        while($flag == 0)
        {
            $flag = 1;
            for($i=0;$i<($numberOfItems-1);$i++)
            {
                if($numbers[$i]>$numbers[($i+1)])
                {
                    $tempName = $names[$i+1];
                    $names[$i+1] = $names[$i];
                    $names[$i] = $tempName;
                   
                    $tempNumber = $numbers[$i+1];
                    $numbers[$i+1] = $numbers[$i];
                    $numbers[$i] = $tempNumber;
                    $flag = 0;
                }
            }
        }  
    }
    
    if($direction==0)
    {
        while($flag == 0)
        {
            $flag = 1;
            for($i=0;$i<($numberOfItems-1);$i++)
            {
                if($numbers[$i]<$numbers[($i+1)])
                {
                    $tempName = $names[$i+1];
                    $names[$i+1] = $names[$i];
                    $names[$i] = $tempName;
                   
                    $tempNumber = $numbers[$i+1];
                    $numbers[$i+1] = $numbers[$i];
                    $numbers[$i] = $tempNumber;
                    $flag = 0;
                }
            }
        }  
    }
    return $names;
}

//Creates Reference Locator
global proc makeLocator()
{
    deleteObjectsCalled("ReOrder_Locator");
    spaceLocator -p 0 0 0- n "ReOrder_Locator";
}

//Procedure that deletes all object with a given prefix
global proc deleteObjectsCalled(string $prefix)
{
    string $Object = $prefix +"*";
    if(`objExists $Object`)
    {
        select $Object; delete;
    }
}      

global proc float DistanceBetween(string $object, string $locator)
{
    float $distance;
    vector $Pos1 = `xform -worldSpace -query -translation ($object + ".vtx[0]")`;
    vector $Pos2 = `xform -worldSpace -query -translation $locator`;
    $distance = sqrt((($Pos1.x-$Pos2.x)*($Pos1.x-$Pos2.x))+(($Pos1.y-$Pos2.y)*($Pos1.y-$Pos2.y))+(($Pos1.z-$Pos2.z)*($Pos1.z-$Pos2.z)));
    return $distance;
}
     

//any existing gui is deleted to make way for any newly created ones.
if (`window -exists KeyframeOffsetWindow`)
    {deleteUI KeyframeOffsetWindow;}

//Creates Window
window -widthHeight 460 340 -t "Keyframe Offset Settings" KeyframeOffsetWindow;
   
    columnLayout;
    separator -h 10;
        floatSliderGrp -l "Global Offset" -value 0 -field true
           -minValue -50 -maxValue 50 -fieldMinValue -10000 -fieldMaxValue 10000 GlobalOffsetAmount;
        floatSliderGrp -l "Keyframe Seperation" -value 0    -field true -pre 3
           -minValue -10 -maxValue 10 -fieldMinValue -1000 -fieldMaxValue 1000 KeyframeOffsetAmount;
        floatSliderGrp -l "Random Amount" -value 0 -field true
           -minValue 0 -maxValue 10 -fieldMinValue -1000 -fieldMaxValue 1000 RandomAmount;
    setParent ..;
    
    columnLayout;
        separator -h 10;
        rowLayout -numberOfColumns 3 -columnWidth3 140 50 50;
        separator;
        button -label "OFFSET KEYFRAMES" -command "KeyframeOffset()" RunButton;
        setParent ..;
    setParent ..;
        
    separator -height 20 -w 400 -style "out";
    
    columnLayout;
        rowLayout -numberOfColumns 3 -columnWidth3 134 50 50;
        separator;
            button -label "RE-ORDER SELECTION" -command "SortSelection()" SortSelectionButton;
        setParent ..;
    setParent ..;
    
    rowLayout -numberOfColumns 3 -columnWidth3 150 60 50;
        columnLayout;
            separator ;
        setParent ..;	
        columnLayout;
            radioCollection Axis;
        	radioButton -select -label "X" X;
        	radioButton -label "Y" Y;
        	radioButton -label "Z" Z;
        setParent ..;	
        columnLayout;
        	radioButton -label "- X" Xneg;
        	radioButton -label "- Y" Yneg;
        	radioButton -label "- Z" Zneg;
        setParent ..;	
    setParent ..;	
    columnLayout;
        rowLayout -numberOfColumns 3 -columnWidth3 150 60 100;
            separator;
            radioButton -label "Locator" locator;
            radioButton -label "- Locator" locatorNeg;
        setParent ..;	
        columnLayout;
            rowLayout -numberOfColumns 3 -columnWidth3 150 60 100;    
                separator;
                button -label "Create Locator" -command "makeLocator()" SortSelectionButton; 
            setParent ..;	
        setParent ..;	
    setParent ..;
    

    showWindow KeyframeOffsetWindow;
