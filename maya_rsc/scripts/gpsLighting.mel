global proc gpsLighting.loadBaseSettings()
{
	//creating main render layer
	string $renderLayerLs[] = `ls -type renderLayer`;
	$mainLayerIndex = stringArrayFind("main", 0, $renderLayerLs);
	if ($mainLayerIndex == -1)
	{
	    createRenderLayer -n "main" -g -num 1;
	    renderLayerEditorRenderable RenderLayerTab "defaultRenderLayer" "0";
	}

	if(!`pluginInfo -q -l vrayformaya`) {loadPlugin "vrayformaya";}

	//switch to vray
	setCurrentRenderer vray;

	if(!`objExists "vraySettings"`) //check to see if the globals are made already
	{
	//setup the renderglobals
	vrayCreateVRaySettingsNode;
	}

	//Load defaults
	//vray framebuffer
	setAttr "vraySettings.vfbOn" 1;
	setAttr "vraySettings.stamp_on" 1;
	string $job=`getenv JOB`;
	string $shot=`getenv SHOT`;
	//string $user=`getenv USER`;
	string $stamp="Frame: %frame Render time: %rendertime Camera: %camera Job: " + $job + " - " + $shot;
	setAttr -type "string" vraySettings.stamp_text $stamp;
	vray vfbControl -srgb true;

	//setup colour for LWF
	setAttr "vraySettings.cmap_gamma" 2.2;
	setAttr "vraySettings.cmap_adaptationOnly" 1;
	setAttr "vraySettings.cmap_affectSwatches" 1;

	//anim in batch mode only
	setAttr "defaultRenderGlobals.animation" 1;
	setAttr "vraySettings.animBatchOnly" 1;

	//force format to exr by default - with zips compression - 16 half float
	string $startFrame = `getenv "STARTFRAME"`;
	string $endFrame = `getenv "ENDFRAME"`;
	setAttr -type "string" "vraySettings.imageFormatStr" "exr";
	setAttr "vraySettings.imgOpt_exr_compression" 3;
	setAttr "vraySettings.imgOpt_exr_bitsPerChannel" 16;
	setAttr -l false { "vraySettings.exradw" };
	setAttr "vraySettings.imgOpt_exr_autoDataWindow" 0;
	setAttr -l true { "vraySettings.exradw" };
	setAttr "vraySettings.fileNamePadding" 4;
	setAttr "defaultRenderGlobals.startFrame" $startFrame;
	setAttr "defaultRenderGlobals.endFrame" $endFrame;
	
	// Set res and fix aspect ratio
	float $aspectRatio = `getenv "ASPECTRATIO"`;
	int $resX = `getenv "RESOLUTIONX"`;
	int $resY = `getenv "RESOLUTIONY"`;
	//setting render test resolution
	setTestResolutionVar(4);
	setAttr "vraySettings.aspectLock" 0;
	setAttr "vraySettings.wi" $resX;
	setAttr "vraySettings.he" $resY;
	setAttr "vraySettings.aspectRatio" $aspectRatio;
	setAttr "vraySettings.pixelAspect" 1;
	setAttr "vraySettings.aspectLock" 1;
	
	// Set render element separator
	setAttr "vraySettings.fileNameRenderElementSeparator" -type "string" "_";
	if (`optionMenuGrp -exists vrayRenderElementSeparator`) {
	optionMenuGrp -edit -sl (2) vrayRenderElementSeparator;
	};
	
	//setting DMC sampler
	gpsLighting.loadADMCSettings();
	
	//lower max transparency
	setAttr "vraySettings.globopt_mtl_transpMaxLevels" 10;
	
	//setting global max depth
	setAttr "vraySettings.globopt_mtl_limitDepth" 1;
	setAttr "vraySettings.globopt_mtl_maxDepth" 3;

	//Make grain animate
	setAttr "vraySettings.dmcs_timeDependent" 1;

	//set default subdiv amount to more realistic number
	setAttr "vraySettings.ddisplac_maxSubdivs" 4;
	setAttr "vraySettings.ddisplac_edgeLength" 1;
	
	//Dynamic memory limit
	setAttr "vraySettings.sys_rayc_dynMemLimit" 3000;
	
	//set render file name
	gpsLighting.setRenderPath();
	
}

//sets user name in render path
global proc gpsLighting.setRenderPath()
{
	string $user = `getenv "USER"`;
	string $SHOT = `getenv "SHOT"`;
	setAttr -l false { "vraySettings.fnprx" };
	setAttr -type "string" "vraySettings.fileNamePrefix" ($user + "/%s/%l/" + $SHOT + "_%l");
	//This cannot be lock otherwise renders submitted to deadline from maya submitter will fail.
	//setAttr -l true { "vraySettings.fnprx" };
}

//Load Adaptive DMC settings
global proc gpsLighting.loadADMCSettings()
{
	setAttr "vraySettings.samplerType" 1;
     setAttr "vraySettings.dmcs_adaptiveAmount" 0.85;
	setAttr "vraySettings.dmcs_adaptiveThreshold" 0.010;
	setAttr "vraySettings.dmcMinSubdivs" 1;
	setAttr "vraySettings.dmcMaxSubdivs" 4;
	setAttr "vraySettings.dmcThreshold" 0.02;

	// setup basic GI settings
	//setAttr "vraySettings.primaryEngine" 2;
	//setAttr "vraySettings.secondaryEngine" 3;
	//setAttr "vraySettings.numPasses" 12;
	//setAttr "vraySettings.subdivs" 2000;	
}


//vray shaders
global proc string gpsLighting.createMaterial(string $type,string $name)
{
  if(!`pluginInfo -q -l vrayformaya`) {loadPlugin "vrayformaya";}

  string $materialName = $name;

  int $disableNaming = `optionVar -q "vrayDisableShaderNaming"`; //check option to pop up naming dialog
  print $disableNaming;
  if($disableNaming < 1)
  {
    string $result = `promptDialog
    -title "Material name"
    -message "Enter Name:"
    -button "OK" -button "Cancel"
    -defaultButton "OK" -cancelButton "Cancel"
    -dismissString "Cancel"`;

    if ($result == "OK") {
        $materialName = `promptDialog -query -text`;
    }    
  }

  //stash selection
  string $objSel[] = `ls -sl -type transform`;


  //create the node
  string $shdrNode = `shadingNode -asShader $type`;
  $shdrNode = `rename $shdrNode ($materialName+"_shd")`;
  //create a shading group
  string $shdrGrp = `sets -renderable true -noSurfaceShader true -empty`;
  $shdrGrp = `rename $shdrGrp ($materialName+"_sg")`;
  //connect the two together
  connectAttr -f ($shdrNode+".outColor") ($shdrGrp+".surfaceShader");

  //assign to all the selected objects
  for($obj in $objSel)
  {
    assignSG $shdrNode $obj;
  }

  return $shdrNode;
}


//vray lights
global proc string gpsLighting.createLight(string $type)
{
  if(!`pluginInfo -q -l vrayformaya`) {loadPlugin "vrayformaya";}

  string $text;
  string $result = `promptDialog
      -title "Light Name"
      -message "Enter Light Name:"
      -button "OK" -button "Cancel"
      -defaultButton "OK" -cancelButton "Cancel"
      -dismissString "Cancel"`;
  
  if ($result == "OK") {
    $text = `promptDialog -query -text`;

    //build name string
    string $name = $text;
    if(endsWith($name,"_lgt") != 1)
    {
      $name = ($name+"_lgt");
    }

    string $trans = `shadingNode -asLight $type`;
    $trans = `rename $trans $name`;

    //make it a little easier to view
    setAttr ($trans+".displayLocalAxis") 1;
    
    select -r $trans;
    return $trans;
  }
  else
  {
    return "";
  }
}

//adds vRay input gamma attribute on selection
global proc gpsLighting.addVRayGamma()
{
	string $objLs[] = `ls -sl`;
	for($obj in $objLs){
		if (`nodeType $obj`=="file"){
			vrayAddAttr $obj vrayFileGammaEnable;
			vrayAddAttr $obj vrayFileColorSpace;
			vrayAddAttr $obj vrayFileGammaValue;
		}
	}
}

//removes vRay input gamma attribute on selection
global proc gpsLighting.removeVRayGamma()
{
	string $objLs[] = `ls -sl`;
	for($obj in $objLs){
		if (`nodeType $obj`=="file"){
			vrayDeleteAttr $obj vrayFileGammaEnable;
			vrayDeleteAttr $obj vrayFileColorSpace;
			vrayDeleteAttr $obj vrayFileGammaValue;
		}
	}
}
